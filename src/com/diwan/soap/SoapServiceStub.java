/**
 * SoapServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.5.4  Built on : Dec 19, 2010 (08:18:42 CET)
 */
package com.diwan.soap;
@SuppressWarnings({"UseOfObsoleteCollectionType","StringBufferMayBeStringBuilder"})

/*
 *  SoapServiceStub java implementation
 */
public class SoapServiceStub extends org.apache.axis2.client.Stub {
    protected org.apache.axis2.description.AxisOperation[] _operations;
    /* hashmaps to keep the fault mapping */
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private static int counter = 0;
    private static synchronized java.lang.String getUniqueSuffix()
    {
        /* reset the counter if it is greater than 99999 */
        if (counter > 99999) {
            counter = 0;
        }
        counter = counter + 1;
        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
    }
    private void populateAxisService() throws org.apache.axis2.AxisFault
    {
        /* creating the Service with a unique name */
        _service = new org.apache.axis2.description.AxisService("SoapService" + getUniqueSuffix());
        addAnonymousOperations();
        /* creating the operations */
        org.apache.axis2.description.AxisOperation __operation;
        _operations = new org.apache.axis2.description.AxisOperation[14];
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "translateArray"));
        _service.addOperation(__operation);
        _operations[0] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "addTranslation"));
        _service.addOperation(__operation);
        _operations[1] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "getLanguageNames"));
        _service.addOperation(__operation);
        _operations[2] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "getTranslations"));
        _service.addOperation(__operation);
        _operations[3] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "addTranslationArray"));
        _service.addOperation(__operation);
        _operations[4] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "getLanguagesForSpeak"));
        _service.addOperation(__operation);
        _operations[5] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "detect"));
        _service.addOperation(__operation);
        _operations[6] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "getTranslationsArray"));
        _service.addOperation(__operation);
        _operations[7] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "getLanguagesForTranslate"));
        _service.addOperation(__operation);
        _operations[8] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "speak"));
        _service.addOperation(__operation);
        _operations[9] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "translate"));
        _service.addOperation(__operation);
        _operations[10] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "detectArray"));
        _service.addOperation(__operation);
        _operations[11] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "breakSentences"));
        _service.addOperation(__operation);
        _operations[12] = __operation;
        __operation = new org.apache.axis2.description.OutInAxisOperation();
        __operation.setName(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "getAppIdToken"));
        _service.addOperation(__operation);
        _operations[13] = __operation;
    }
    /* populates the faults */
    private void populateFaults() {}
    /**
     *Constructor that takes in a configContext
     */
    public SoapServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
                           java.lang.String targetEndpoint)
    throws org.apache.axis2.AxisFault
    {
        this(configurationContext, targetEndpoint, false);
    }
    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public SoapServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
                           java.lang.String targetEndpoint, boolean useSeparateListener)
    throws org.apache.axis2.AxisFault
    {
        /* To populate AxisService */
        populateAxisService();
        populateFaults();
        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext, _service);
        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                                              targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }
    /**
     * Default Constructor
     */
    public SoapServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault
    {
        this(configurationContext, "http://api.microsofttranslator.com/V2/soap.svc");
    }
    /**
     * Default Constructor
     */
    public SoapServiceStub() throws org.apache.axis2.AxisFault
    {
        this("http://api.microsofttranslator.com/V2/soap.svc");
    }
    /**
     * Constructor taking the target endpoint
     */
    public SoapServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault
    {
        this(null, targetEndpoint);
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#translateArray
     * @param translateArray

     */
    public com.diwan.soap.SoapServiceStub.TranslateArrayResponse1 translateArray(com.diwan.soap.SoapServiceStub.TranslateArray translateArray)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/TranslateArray");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             translateArray,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "translateArray")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.TranslateArrayResponse1.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.TranslateArrayResponse1)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#addTranslation
     * @param addTranslation

     */
    public com.diwan.soap.SoapServiceStub.AddTranslationResponse addTranslation(com.diwan.soap.SoapServiceStub.AddTranslation addTranslation)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/AddTranslation");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             addTranslation,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "addTranslation")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.AddTranslationResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.AddTranslationResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#getLanguageNames
     * @param getLanguageNames

     */
    public com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse getLanguageNames(com.diwan.soap.SoapServiceStub.GetLanguageNames getLanguageNames)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/GetLanguageNames");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             getLanguageNames,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "getLanguageNames")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#getTranslations
     * @param getTranslations

     */
    public com.diwan.soap.SoapServiceStub.GetTranslationsResponse0 getTranslations(com.diwan.soap.SoapServiceStub.GetTranslations getTranslations)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/GetTranslations");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             getTranslations,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "getTranslations")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.GetTranslationsResponse0.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.GetTranslationsResponse0)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#addTranslationArray
     * @param addTranslationArray

     */
    public com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse addTranslationArray(com.diwan.soap.SoapServiceStub.AddTranslationArray addTranslationArray)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/AddTranslationArray");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             addTranslationArray,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "addTranslationArray")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#getLanguagesForSpeak
     * @param getLanguagesForSpeak

     */
    public com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse getLanguagesForSpeak(com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak getLanguagesForSpeak)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForSpeak");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             getLanguagesForSpeak,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "getLanguagesForSpeak")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#detect
     * @param detect

     */
    public com.diwan.soap.SoapServiceStub.DetectResponse detect(com.diwan.soap.SoapServiceStub.Detect detect)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/Detect");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             detect,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "detect")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.DetectResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.DetectResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#getTranslationsArray
     * @param getTranslationsArray

     */
    public com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse getTranslationsArray(com.diwan.soap.SoapServiceStub.GetTranslationsArray getTranslationsArray)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/GetTranslationsArray");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             getTranslationsArray,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "getTranslationsArray")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#getLanguagesForTranslate
     * @param getLanguagesForTranslate

     */
    public com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse getLanguagesForTranslate(com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate getLanguagesForTranslate)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForTranslate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             getLanguagesForTranslate,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "getLanguagesForTranslate")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#speak
     * @param speak

     */
    public com.diwan.soap.SoapServiceStub.SpeakResponse speak(com.diwan.soap.SoapServiceStub.Speak speak)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/Speak");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             speak,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "speak")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.SpeakResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.SpeakResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#translate
     * @param translate

     */
    public com.diwan.soap.SoapServiceStub.TranslateResponse translate(com.diwan.soap.SoapServiceStub.Translate translate)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/Translate");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             translate,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "translate")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.TranslateResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.TranslateResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#detectArray
     * @param detectArray

     */
    public com.diwan.soap.SoapServiceStub.DetectArrayResponse detectArray(com.diwan.soap.SoapServiceStub.DetectArray detectArray)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/DetectArray");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             detectArray,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "detectArray")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.DetectArrayResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.DetectArrayResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#breakSentences
     * @param breakSentences

     */
    public com.diwan.soap.SoapServiceStub.BreakSentencesResponse breakSentences(com.diwan.soap.SoapServiceStub.BreakSentences breakSentences)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/BreakSentences");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             breakSentences,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "breakSentences")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.BreakSentencesResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.BreakSentencesResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     * Auto generated method signature
     *
     * @see com.diwan.SoapService#getAppIdToken
     * @param getAppIdToken

     */
    public com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse getAppIdToken(com.diwan.soap.SoapServiceStub.GetAppIdToken getAppIdToken)
    throws java.rmi.RemoteException
    {
        org.apache.axis2.context.MessageContext _messageContext = null;
        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
            _operationClient.getOptions().setAction("http://api.microsofttranslator.com/V2/LanguageService/GetAppIdToken");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);
            addPropertyToOperationClient(_operationClient, org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR, "&");
            /* create a message context */
            _messageContext = new org.apache.axis2.context.MessageContext();
            /* create SOAP envelope with that payload */
            org.apache.axiom.soap.SOAPEnvelope env = null;
            env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                             getAppIdToken,
                             optimizeContent(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                                           "getAppIdToken")));
            /* adding SOAP soap_headers */
            _serviceClient.addHeadersToEnvelope(env);
            /* set the message context with that soap envelope */
            _messageContext.setEnvelope(env);
            /* add the message contxt to the operation client */
            _operationClient.addMessageContext(_messageContext);
            /* execute the operation client */
            _operationClient.execute(true);
            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
            java.lang.Object object = fromOM(
                _returnEnv.getBody().getFirstElement(),
                com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse.class,
                getEnvelopeNamespaces(_returnEnv));
            return (com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse)object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(faultElt.getQName())) {
                    /* make the fault by reflection */
                    try {
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.Exception ex =
                            (java.lang.Exception)exceptionClass.newInstance();
                        /* message class */
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(faultElt.getQName());
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt, messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                                                              new java.lang.Class[] {messageClass});
                        m.invoke(ex, new java.lang.Object[] {messageObject});
                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        /* we cannot intantiate the class - throw the original Axis fault */
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            _messageContext.getTransportOut().getSender().cleanup(_messageContext);
        }
    }
    /**
     *  A utility method that copies the namepaces from the SOAPEnvelope
     */
    private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env)
    {
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace)namespaceIterator.next();
            returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
        }
        return returnMap;
    }
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName)
    {
        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }
        return false;
    }
    /* http://api.microsofttranslator.com/V2/soap.svc */
    public static class GetAppIdToken
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetAppIdToken",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for MinRatingRead
         */
        protected int localMinRatingRead;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMinRatingReadTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getMinRatingRead()
        {
            return localMinRatingRead;
        }
        /**
         * Auto generated setter method
         * @param param MinRatingRead
         */
        public void setMinRatingRead(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localMinRatingReadTracker = false;
            } else {
                localMinRatingReadTracker = true;
            }
            this.localMinRatingRead = param;
        }
        /**
         * field for MaxRatingWrite
         */
        protected int localMaxRatingWrite;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaxRatingWriteTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getMaxRatingWrite()
        {
            return localMaxRatingWrite;
        }
        /**
         * Auto generated setter method
         * @param param MaxRatingWrite
         */
        public void setMaxRatingWrite(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localMaxRatingWriteTracker = false;
            } else {
                localMaxRatingWriteTracker = true;
            }
            this.localMaxRatingWrite = param;
        }
        /**
         * field for ExpireSeconds
         */
        protected int localExpireSeconds;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExpireSecondsTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getExpireSeconds()
        {
            return localExpireSeconds;
        }
        /**
         * Auto generated setter method
         * @param param ExpireSeconds
         */
        public void setExpireSeconds(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localExpireSecondsTracker = false;
            } else {
                localExpireSecondsTracker = true;
            }
            this.localExpireSeconds = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetAppIdToken.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetAppIdToken",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetAppIdToken",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localMinRatingReadTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "minRatingRead", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "minRatingRead");
                    }
                } else {
                    xmlWriter.writeStartElement("minRatingRead");
                }
                if (localMinRatingRead == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("minRatingRead cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMinRatingRead));
                }
                xmlWriter.writeEndElement();
            }
            if (localMaxRatingWriteTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "maxRatingWrite", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "maxRatingWrite");
                    }
                } else {
                    xmlWriter.writeStartElement("maxRatingWrite");
                }
                if (localMaxRatingWrite == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("maxRatingWrite cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRatingWrite));
                }
                xmlWriter.writeEndElement();
            }
            if (localExpireSecondsTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "expireSeconds", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "expireSeconds");
                    }
                } else {
                    xmlWriter.writeStartElement("expireSeconds");
                }
                if (localExpireSeconds == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("expireSeconds cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExpireSeconds));
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localMinRatingReadTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "minRatingRead"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMinRatingRead));
            }
            if (localMaxRatingWriteTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "maxRatingWrite"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxRatingWrite));
            }
            if (localExpireSecondsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "expireSeconds"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localExpireSeconds));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetAppIdToken parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetAppIdToken object =
                    new GetAppIdToken();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetAppIdToken".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetAppIdToken) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "minRatingRead").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setMinRatingRead(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setMinRatingRead(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "maxRatingWrite").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setMaxRatingWrite(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setMaxRatingWrite(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "expireSeconds").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setExpireSeconds(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setExpireSeconds(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetTranslations
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetTranslations",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Text
         */
        protected java.lang.String localText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText()
        {
            return localText;
        }
        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextTracker = true;
            } else {
                localTextTracker = true;
            }
            this.localText = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for To
         */
        protected java.lang.String localTo;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTo()
        {
            return localTo;
        }
        /**
         * Auto generated setter method
         * @param param To
         */
        public void setTo(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localToTracker = true;
            } else {
                localToTracker = true;
            }
            this.localTo = param;
        }
        /**
         * field for MaxTranslations
         */
        protected int localMaxTranslations;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaxTranslationsTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getMaxTranslations()
        {
            return localMaxTranslations;
        }
        /**
         * Auto generated setter method
         * @param param MaxTranslations
         */
        public void setMaxTranslations(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localMaxTranslationsTracker = false;
            } else {
                localMaxTranslationsTracker = true;
            }
            this.localMaxTranslations = param;
        }
        /**
         * field for Options
         */
        protected TranslateOptions localOptions;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionsTracker = false;
        /**
         * Auto generated getter method
         * @return TranslateOptions
         */
        public TranslateOptions getOptions()
        {
            return localOptions;
        }
        /**
         * Auto generated setter method
         * @param param Options
         */
        public void setOptions(TranslateOptions param)
        {
            if (param != null) {
                /* update the setting tracker */
                localOptionsTracker = true;
            } else {
                localOptionsTracker = true;
            }
            this.localOptions = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetTranslations.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetTranslations",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetTranslations",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "text", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "text");
                    }
                } else {
                    xmlWriter.writeStartElement("text");
                }
                if (localText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localText);
                }
                xmlWriter.writeEndElement();
            }
            if (localFromTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "from", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "from");
                    }
                } else {
                    xmlWriter.writeStartElement("from");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localToTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "to", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "to");
                    }
                } else {
                    xmlWriter.writeStartElement("to");
                }
                if (localTo == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTo);
                }
                xmlWriter.writeEndElement();
            }
            if (localMaxTranslationsTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "maxTranslations", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "maxTranslations");
                    }
                } else {
                    xmlWriter.writeStartElement("maxTranslations");
                }
                if (localMaxTranslations == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("maxTranslations cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxTranslations));
                }
                xmlWriter.writeEndElement();
            }
            if (localOptionsTracker) {
                if (localOptions == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "options", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "options");
                        }
                    } else {
                        xmlWriter.writeStartElement("options");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOptions.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options"),
                                           factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "text"));
                elementList.add(localText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "from"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localToTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "to"));
                elementList.add(localTo == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTo));
            }
            if (localMaxTranslationsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "maxTranslations"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxTranslations));
            }
            if (localOptionsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "options"));
                elementList.add(localOptions == null ? null
                                : localOptions);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetTranslations parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetTranslations object =
                    new GetTranslations();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetTranslations".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetTranslations) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "text").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "from").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "to").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTo(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "maxTranslations").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setMaxTranslations(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setMaxTranslations(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setOptions(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setOptions(TranslateOptions.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateArrayResponse1
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "TranslateArrayResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslateArrayResult
         */
        protected ArrayOfTranslateArrayResponse localTranslateArrayResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslateArrayResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfTranslateArrayResponse
         */
        public ArrayOfTranslateArrayResponse getTranslateArrayResult()
        {
            return localTranslateArrayResult;
        }
        /**
         * Auto generated setter method
         * @param param TranslateArrayResult
         */
        public void setTranslateArrayResult(ArrayOfTranslateArrayResponse param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslateArrayResultTracker = true;
            } else {
                localTranslateArrayResultTracker = true;
            }
            this.localTranslateArrayResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateArrayResponse1.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":TranslateArrayResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "TranslateArrayResponse",
                                   xmlWriter);
                }
            }
            if (localTranslateArrayResultTracker) {
                if (localTranslateArrayResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "TranslateArrayResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "TranslateArrayResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("TranslateArrayResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTranslateArrayResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "TranslateArrayResult"),
                                                        factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localTranslateArrayResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "TranslateArrayResult"));
                elementList.add(localTranslateArrayResult == null ? null
                                : localTranslateArrayResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateArrayResponse1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateArrayResponse1 object =
                    new TranslateArrayResponse1();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"TranslateArrayResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TranslateArrayResponse1) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "TranslateArrayResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTranslateArrayResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTranslateArrayResult(ArrayOfTranslateArrayResponse.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class AddTranslationResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "AddTranslationResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    AddTranslationResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":AddTranslationResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "AddTranslationResponse",
                                   xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AddTranslationResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                AddTranslationResponse object =
                    new AddTranslationResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"AddTranslationResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddTranslationResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Translation
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = Translation
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for OriginalText
         */
        protected java.lang.String localOriginalText;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOriginalText()
        {
            return localOriginalText;
        }
        /**
         * Auto generated setter method
         * @param param OriginalText
         */
        public void setOriginalText(java.lang.String param)
        {
            this.localOriginalText = param;
        }
        /**
         * field for Rating
         */
        protected int localRating;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRatingTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getRating()
        {
            return localRating;
        }
        /**
         * Auto generated setter method
         * @param param Rating
         */
        public void setRating(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localRatingTracker = false;
            } else {
                localRatingTracker = true;
            }
            this.localRating = param;
        }
        /**
         * field for Sequence
         */
        protected int localSequence;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSequenceTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getSequence()
        {
            return localSequence;
        }
        /**
         * Auto generated setter method
         * @param param Sequence
         */
        public void setSequence(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localSequenceTracker = false;
            } else {
                localSequenceTracker = true;
            }
            this.localSequence = param;
        }
        /**
         * field for TranslatedText
         */
        protected java.lang.String localTranslatedText;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTranslatedText()
        {
            return localTranslatedText;
        }
        /**
         * Auto generated setter method
         * @param param TranslatedText
         */
        public void setTranslatedText(java.lang.String param)
        {
            this.localTranslatedText = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Translation.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":Translation",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "Translation",
                                   xmlWriter);
                }
            }
            namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
            if (!namespace.equals("")) {
                prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, "OriginalText", namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, "OriginalText");
                }
            } else {
                xmlWriter.writeStartElement("OriginalText");
            }
            if (localOriginalText == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(localOriginalText);
            }
            xmlWriter.writeEndElement();
            if (localRatingTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Rating", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Rating");
                    }
                } else {
                    xmlWriter.writeStartElement("Rating");
                }
                if (localRating == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("Rating cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRating));
                }
                xmlWriter.writeEndElement();
            }
            if (localSequenceTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Sequence", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Sequence");
                    }
                } else {
                    xmlWriter.writeStartElement("Sequence");
                }
                if (localSequence == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("Sequence cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSequence));
                }
                xmlWriter.writeEndElement();
            }
            namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
            if (!namespace.equals("")) {
                prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, "TranslatedText", namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, "TranslatedText");
                }
            } else {
                xmlWriter.writeStartElement("TranslatedText");
            }
            if (localTranslatedText == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(localTranslatedText);
            }
            xmlWriter.writeEndElement();
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                          "OriginalText"));
            elementList.add(localOriginalText == null ? null
                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginalText));
            if (localRatingTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Rating"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRating));
            }
            if (localSequenceTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Sequence"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSequence));
            }
            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                          "TranslatedText"));
            elementList.add(localTranslatedText == null ? null
                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTranslatedText));
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Translation parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Translation object =
                    new Translation();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"Translation".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Translation) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "OriginalText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setOriginalText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        /* A start element we are not expecting indicates an invalid parameter was passed */
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Rating").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setRating(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setRating(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Sequence").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setSequence(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setSequence(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslatedText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTranslatedText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        /* A start element we are not expecting indicates an invalid parameter was passed */
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateArray
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "TranslateArray",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Texts
         */
        protected ArrayOfstring localTexts;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getTexts()
        {
            return localTexts;
        }
        /**
         * Auto generated setter method
         * @param param Texts
         */
        public void setTexts(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextsTracker = true;
            } else {
                localTextsTracker = true;
            }
            this.localTexts = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for To
         */
        protected java.lang.String localTo;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTo()
        {
            return localTo;
        }
        /**
         * Auto generated setter method
         * @param param To
         */
        public void setTo(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localToTracker = true;
            } else {
                localToTracker = true;
            }
            this.localTo = param;
        }
        /**
         * field for Options
         */
        protected TranslateOptions localOptions;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionsTracker = false;
        /**
         * Auto generated getter method
         * @return TranslateOptions
         */
        public TranslateOptions getOptions()
        {
            return localOptions;
        }
        /**
         * Auto generated setter method
         * @param param Options
         */
        public void setOptions(TranslateOptions param)
        {
            if (param != null) {
                /* update the setting tracker */
                localOptionsTracker = true;
            } else {
                localOptionsTracker = true;
            }
            this.localOptions = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateArray.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":TranslateArray",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "TranslateArray",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextsTracker) {
                if (localTexts == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "texts", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "texts");
                        }
                    } else {
                        xmlWriter.writeStartElement("texts");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTexts.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "texts"),
                                         factory, xmlWriter);
                }
            }
            if (localFromTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "from", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "from");
                    }
                } else {
                    xmlWriter.writeStartElement("from");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localToTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "to", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "to");
                    }
                } else {
                    xmlWriter.writeStartElement("to");
                }
                if (localTo == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTo);
                }
                xmlWriter.writeEndElement();
            }
            if (localOptionsTracker) {
                if (localOptions == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "options", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "options");
                        }
                    } else {
                        xmlWriter.writeStartElement("options");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOptions.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options"),
                                           factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "texts"));
                elementList.add(localTexts == null ? null
                                : localTexts);
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "from"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localToTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "to"));
                elementList.add(localTo == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTo));
            }
            if (localOptionsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "options"));
                elementList.add(localOptions == null ? null
                                : localOptions);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateArray object =
                    new TranslateArray();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"TranslateArray".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TranslateArray) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "texts").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTexts(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTexts(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "from").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "to").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTo(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setOptions(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setOptions(TranslateOptions.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Guid
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "guid",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Guid
         */
        protected java.lang.String localGuid;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGuid()
        {
            return localGuid;
        }
        /**
         * Auto generated setter method
         * @param param Guid
         */
        public void setGuid(java.lang.String param)
        {
            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches("[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")) {
                this.localGuid = param;
            } else {
                throw new java.lang.RuntimeException();
            }
        }
        public java.lang.String toString()
        {
            return localGuid.toString();
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Guid.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String localName = parentQName.getLocalPart();
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":guid",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "guid",
                                   xmlWriter);
                }
            }
            if (localGuid == null) {
                throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localGuid);
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGuid)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static Guid fromString(java.lang.String value,
                                          java.lang.String namespaceURI)
            {
                Guid returnValue = new Guid();
                returnValue.setGuid(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                return returnValue;
            }
            public static Guid fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                          java.lang.String content)
            {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return Guid.Factory.fromString(content, namespaceUri);
                } else {
                    return Guid.Factory.fromString(content, "");
                }
            }
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Guid parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Guid object =
                    new Guid();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                java.lang.String content = reader.getElementText();
                                object.setGuid(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslationMatchE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "TranslationMatch",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslationMatch
         */
        protected TranslationMatch localTranslationMatch;
        /**
         * Auto generated getter method
         * @return TranslationMatch
         */
        public TranslationMatch getTranslationMatch()
        {
            return localTranslationMatch;
        }
        /**
         * Auto generated setter method
         * @param param TranslationMatch
         */
        public void setTranslationMatch(TranslationMatch param)
        {
            this.localTranslationMatch = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslationMatchE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslationMatch == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "TranslationMatch", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "TranslationMatch");
                    }
                } else {
                    xmlWriter.writeStartElement("TranslationMatch");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localTranslationMatch.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslationMatch == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localTranslationMatch.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslationMatchE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslationMatchE object =
                    new TranslationMatchE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslationMatch").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setTranslationMatch(null);
                                    reader.next();
                                } else {
                                    object.setTranslationMatch(TranslationMatch.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfTranslationE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "ArrayOfTranslation",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for ArrayOfTranslation
         */
        protected ArrayOfTranslation localArrayOfTranslation;
        /**
         * Auto generated getter method
         * @return ArrayOfTranslation
         */
        public ArrayOfTranslation getArrayOfTranslation()
        {
            return localArrayOfTranslation;
        }
        /**
         * Auto generated setter method
         * @param param ArrayOfTranslation
         */
        public void setArrayOfTranslation(ArrayOfTranslation param)
        {
            this.localArrayOfTranslation = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfTranslationE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfTranslation == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ArrayOfTranslation", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ArrayOfTranslation");
                    }
                } else {
                    xmlWriter.writeStartElement("ArrayOfTranslation");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localArrayOfTranslation.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfTranslation == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localArrayOfTranslation.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfTranslationE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfTranslationE object =
                    new ArrayOfTranslationE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "ArrayOfTranslation").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setArrayOfTranslation(null);
                                    reader.next();
                                } else {
                                    object.setArrayOfTranslation(ArrayOfTranslation.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Decimal
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "decimal",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Decimal
         */
        protected java.math.BigDecimal localDecimal;
        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDecimal()
        {
            return localDecimal;
        }
        /**
         * Auto generated setter method
         * @param param Decimal
         */
        public void setDecimal(java.math.BigDecimal param)
        {
            this.localDecimal = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Decimal.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "decimal";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":decimal",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "decimal",
                                   xmlWriter);
                }
            }
            if (localDecimal == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDecimal));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localDecimal == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDecimal)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Decimal parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Decimal object =
                    new Decimal();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "decimal").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setDecimal(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class DateTime
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "dateTime",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for DateTime
         */
        protected java.util.Calendar localDateTime;
        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getDateTime()
        {
            return localDateTime;
        }
        /**
         * Auto generated setter method
         * @param param DateTime
         */
        public void setDateTime(java.util.Calendar param)
        {
            this.localDateTime = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    DateTime.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "dateTime";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":dateTime",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "dateTime",
                                   xmlWriter);
                }
            }
            if (localDateTime == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateTime));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localDateTime == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateTime)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DateTime parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                DateTime object =
                    new DateTime();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "dateTime").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setDateTime(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _long
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "long",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _long
         */
        protected long local_long;
        /**
         * Auto generated getter method
         * @return long
         */
        public long get_long()
        {
            return local_long;
        }
        /**
         * Auto generated setter method
         * @param param _long
         */
        public void set_long(long param)
        {
            this.local_long = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _long.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "long";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":long",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "long",
                                   xmlWriter);
                }
            }
            if (local_long == java.lang.Long.MIN_VALUE) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_long));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_long)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _long parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _long object =
                    new _long();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        object.set_long(java.lang.Long.MIN_VALUE);
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "long").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_long(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));
                                } else {
                                    object.set_long(java.lang.Long.MIN_VALUE);
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                     java.lang.String typeName,
                                                     javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
        {
            if ("http://schemas.microsoft.com/2003/10/Serialization/".equals(namespaceURI)
                && "char".equals(typeName)) {
                return _char.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "ArrayOfTranslateArrayResponse".equals(typeName)) {
                return ArrayOfTranslateArrayResponse.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "Translation".equals(typeName)) {
                return Translation.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "GetTranslationsResponse".equals(typeName)) {
                return GetTranslationsResponse.Factory.parse(reader);
            }
            if ("http://schemas.microsoft.com/2003/10/Serialization/Arrays".equals(namespaceURI)
                && "ArrayOfstring".equals(typeName)) {
                return ArrayOfstring.Factory.parse(reader);
            }
            if ("http://schemas.microsoft.com/2003/10/Serialization/".equals(namespaceURI)
                && "guid".equals(typeName)) {
                return Guid.Factory.parse(reader);
            }
            if ("http://schemas.microsoft.com/2003/10/Serialization/".equals(namespaceURI)
                && "duration".equals(typeName)) {
                return Duration.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "TranslateOptions".equals(typeName)) {
                return TranslateOptions.Factory.parse(reader);
            }
            if ("http://schemas.microsoft.com/2003/10/Serialization/Arrays".equals(namespaceURI)
                && "ArrayOfint".equals(typeName)) {
                return ArrayOfint.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "ArrayOfTranslation".equals(typeName)) {
                return ArrayOfTranslation.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "TranslateArrayResponse".equals(typeName)) {
                return TranslateArrayResponse.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "ArrayOfGetTranslationsResponse".equals(typeName)) {
                return ArrayOfGetTranslationsResponse.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "TranslationMatch".equals(typeName)) {
                return TranslationMatch.Factory.parse(reader);
            }
            if ("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2".equals(namespaceURI)
                && "ArrayOfTranslationMatch".equals(typeName)) {
                return ArrayOfTranslationMatch.Factory.parse(reader);
            }
            throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
        }
    }
    public static class _float
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "float",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _float
         */
        protected float local_float;
        /**
         * Auto generated getter method
         * @return float
         */
        public float get_float()
        {
            return local_float;
        }
        /**
         * Auto generated setter method
         * @param param _float
         */
        public void set_float(float param)
        {
            this.local_float = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _float.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "float";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":float",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "float",
                                   xmlWriter);
                }
            }
            if (java.lang.Float.isNaN(local_float)) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_float));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_float)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _float parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _float object =
                    new _float();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        object.set_float(java.lang.Float.NaN);
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "float").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_float(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(content));
                                } else {
                                    object.set_float(java.lang.Float.NaN);
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetLanguageNamesResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetLanguageNamesResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetLanguageNamesResult
         */
        protected ArrayOfstring localGetLanguageNamesResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetLanguageNamesResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getGetLanguageNamesResult()
        {
            return localGetLanguageNamesResult;
        }
        /**
         * Auto generated setter method
         * @param param GetLanguageNamesResult
         */
        public void setGetLanguageNamesResult(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localGetLanguageNamesResultTracker = true;
            } else {
                localGetLanguageNamesResultTracker = true;
            }
            this.localGetLanguageNamesResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetLanguageNamesResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetLanguageNamesResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetLanguageNamesResponse",
                                   xmlWriter);
                }
            }
            if (localGetLanguageNamesResultTracker) {
                if (localGetLanguageNamesResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "GetLanguageNamesResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "GetLanguageNamesResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("GetLanguageNamesResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localGetLanguageNamesResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetLanguageNamesResult"),
                                                          factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetLanguageNamesResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "GetLanguageNamesResult"));
                elementList.add(localGetLanguageNamesResult == null ? null
                                : localGetLanguageNamesResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetLanguageNamesResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetLanguageNamesResponse object =
                    new GetLanguageNamesResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetLanguageNamesResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetLanguageNamesResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetLanguageNamesResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setGetLanguageNamesResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setGetLanguageNamesResult(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateArrayResponse
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = TranslateArrayResponse
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Error
         */
        protected java.lang.String localError;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrorTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getError()
        {
            return localError;
        }
        /**
         * Auto generated setter method
         * @param param Error
         */
        public void setError(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localErrorTracker = true;
            } else {
                localErrorTracker = true;
            }
            this.localError = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for OriginalTextSentenceLengths
         */
        protected ArrayOfint localOriginalTextSentenceLengths;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOriginalTextSentenceLengthsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfint
         */
        public ArrayOfint getOriginalTextSentenceLengths()
        {
            return localOriginalTextSentenceLengths;
        }
        /**
         * Auto generated setter method
         * @param param OriginalTextSentenceLengths
         */
        public void setOriginalTextSentenceLengths(ArrayOfint param)
        {
            if (param != null) {
                /* update the setting tracker */
                localOriginalTextSentenceLengthsTracker = true;
            } else {
                localOriginalTextSentenceLengthsTracker = true;
            }
            this.localOriginalTextSentenceLengths = param;
        }
        /**
         * field for State
         */
        protected java.lang.String localState;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStateTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getState()
        {
            return localState;
        }
        /**
         * Auto generated setter method
         * @param param State
         */
        public void setState(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localStateTracker = true;
            } else {
                localStateTracker = true;
            }
            this.localState = param;
        }
        /**
         * field for TranslatedText
         */
        protected java.lang.String localTranslatedText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslatedTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTranslatedText()
        {
            return localTranslatedText;
        }
        /**
         * Auto generated setter method
         * @param param TranslatedText
         */
        public void setTranslatedText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslatedTextTracker = true;
            } else {
                localTranslatedTextTracker = true;
            }
            this.localTranslatedText = param;
        }
        /**
         * field for TranslatedTextSentenceLengths
         */
        protected ArrayOfint localTranslatedTextSentenceLengths;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslatedTextSentenceLengthsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfint
         */
        public ArrayOfint getTranslatedTextSentenceLengths()
        {
            return localTranslatedTextSentenceLengths;
        }
        /**
         * Auto generated setter method
         * @param param TranslatedTextSentenceLengths
         */
        public void setTranslatedTextSentenceLengths(ArrayOfint param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslatedTextSentenceLengthsTracker = true;
            } else {
                localTranslatedTextSentenceLengthsTracker = true;
            }
            this.localTranslatedTextSentenceLengths = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateArrayResponse.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":TranslateArrayResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "TranslateArrayResponse",
                                   xmlWriter);
                }
            }
            if (localErrorTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Error", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Error");
                    }
                } else {
                    xmlWriter.writeStartElement("Error");
                }
                if (localError == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localError);
                }
                xmlWriter.writeEndElement();
            }
            if (localFromTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "From", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "From");
                    }
                } else {
                    xmlWriter.writeStartElement("From");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localOriginalTextSentenceLengthsTracker) {
                if (localOriginalTextSentenceLengths == null) {
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "OriginalTextSentenceLengths", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "OriginalTextSentenceLengths");
                        }
                    } else {
                        xmlWriter.writeStartElement("OriginalTextSentenceLengths");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOriginalTextSentenceLengths.serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "OriginalTextSentenceLengths"),
                                                               factory, xmlWriter);
                }
            }
            if (localStateTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "State", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "State");
                    }
                } else {
                    xmlWriter.writeStartElement("State");
                }
                if (localState == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localState);
                }
                xmlWriter.writeEndElement();
            }
            if (localTranslatedTextTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "TranslatedText", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "TranslatedText");
                    }
                } else {
                    xmlWriter.writeStartElement("TranslatedText");
                }
                if (localTranslatedText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTranslatedText);
                }
                xmlWriter.writeEndElement();
            }
            if (localTranslatedTextSentenceLengthsTracker) {
                if (localTranslatedTextSentenceLengths == null) {
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "TranslatedTextSentenceLengths", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "TranslatedTextSentenceLengths");
                        }
                    } else {
                        xmlWriter.writeStartElement("TranslatedTextSentenceLengths");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTranslatedTextSentenceLengths.serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslatedTextSentenceLengths"),
                                                                 factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localErrorTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Error"));
                elementList.add(localError == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localError));
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "From"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localOriginalTextSentenceLengthsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "OriginalTextSentenceLengths"));
                elementList.add(localOriginalTextSentenceLengths == null ? null
                                : localOriginalTextSentenceLengths);
            }
            if (localStateTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "State"));
                elementList.add(localState == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localState));
            }
            if (localTranslatedTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "TranslatedText"));
                elementList.add(localTranslatedText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTranslatedText));
            }
            if (localTranslatedTextSentenceLengthsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "TranslatedTextSentenceLengths"));
                elementList.add(localTranslatedTextSentenceLengths == null ? null
                                : localTranslatedTextSentenceLengths);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateArrayResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateArrayResponse object =
                    new TranslateArrayResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"TranslateArrayResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TranslateArrayResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Error").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setError(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "From").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "OriginalTextSentenceLengths").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setOriginalTextSentenceLengths(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setOriginalTextSentenceLengths(ArrayOfint.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "State").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setState(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslatedText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTranslatedText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslatedTextSentenceLengths").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTranslatedTextSentenceLengths(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTranslatedTextSentenceLengths(ArrayOfint.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _charE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "char",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _char
         */
        protected _char local_char;
        /**
         * Auto generated getter method
         * @return _char
         */
        public _char get_char()
        {
            return local_char;
        }
        /**
         * Auto generated setter method
         * @param param _char
         */
        public void set_char(_char param)
        {
            this.local_char = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _charE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (local_char == null) {
                java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "char", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "char");
                    }
                } else {
                    xmlWriter.writeStartElement("char");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                local_char.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (local_char == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return local_char.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _charE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _charE object =
                    new _charE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "char").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.set_char(null);
                                    reader.next();
                                } else {
                                    object.set_char(_char.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfTranslationMatchE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "ArrayOfTranslationMatch",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for ArrayOfTranslationMatch
         */
        protected ArrayOfTranslationMatch localArrayOfTranslationMatch;
        /**
         * Auto generated getter method
         * @return ArrayOfTranslationMatch
         */
        public ArrayOfTranslationMatch getArrayOfTranslationMatch()
        {
            return localArrayOfTranslationMatch;
        }
        /**
         * Auto generated setter method
         * @param param ArrayOfTranslationMatch
         */
        public void setArrayOfTranslationMatch(ArrayOfTranslationMatch param)
        {
            this.localArrayOfTranslationMatch = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfTranslationMatchE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfTranslationMatch == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ArrayOfTranslationMatch", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ArrayOfTranslationMatch");
                    }
                } else {
                    xmlWriter.writeStartElement("ArrayOfTranslationMatch");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localArrayOfTranslationMatch.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfTranslationMatch == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localArrayOfTranslationMatch.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfTranslationMatchE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfTranslationMatchE object =
                    new ArrayOfTranslationMatchE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "ArrayOfTranslationMatch").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setArrayOfTranslationMatch(null);
                                    reader.next();
                                } else {
                                    object.setArrayOfTranslationMatch(ArrayOfTranslationMatch.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class UnsignedByte
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "unsignedByte",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for UnsignedByte
         */
        protected org.apache.axis2.databinding.types.UnsignedByte localUnsignedByte;
        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.UnsignedByte
         */
        public org.apache.axis2.databinding.types.UnsignedByte getUnsignedByte()
        {
            return localUnsignedByte;
        }
        /**
         * Auto generated setter method
         * @param param UnsignedByte
         */
        public void setUnsignedByte(org.apache.axis2.databinding.types.UnsignedByte param)
        {
            this.localUnsignedByte = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    UnsignedByte.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "unsignedByte";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":unsignedByte",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "unsignedByte",
                                   xmlWriter);
                }
            }
            if (localUnsignedByte == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedByte));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localUnsignedByte == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedByte)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UnsignedByte parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                UnsignedByte object =
                    new UnsignedByte();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "unsignedByte").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setUnsignedByte(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedByte(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class AnyURI
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "anyURI",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AnyURI
         */
        protected org.apache.axis2.databinding.types.URI localAnyURI;
        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.URI
         */
        public org.apache.axis2.databinding.types.URI getAnyURI()
        {
            return localAnyURI;
        }
        /**
         * Auto generated setter method
         * @param param AnyURI
         */
        public void setAnyURI(org.apache.axis2.databinding.types.URI param)
        {
            this.localAnyURI = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    AnyURI.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "anyURI";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":anyURI",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "anyURI",
                                   xmlWriter);
                }
            }
            if (localAnyURI == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAnyURI));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localAnyURI == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAnyURI)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AnyURI parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                AnyURI object =
                    new AnyURI();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "anyURI").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setAnyURI(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToAnyURI(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Base64Binary
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "base64Binary",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Base64Binary
         */
        protected javax.activation.DataHandler localBase64Binary;
        /**
         * Auto generated getter method
         * @return javax.activation.DataHandler
         */
        public javax.activation.DataHandler getBase64Binary()
        {
            return localBase64Binary;
        }
        /**
         * Auto generated setter method
         * @param param Base64Binary
         */
        public void setBase64Binary(javax.activation.DataHandler param)
        {
            this.localBase64Binary = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Base64Binary.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "base64Binary";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":base64Binary",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "base64Binary",
                                   xmlWriter);
                }
            }
            if (localBase64Binary == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                if (localBase64Binary != null) {
                    xmlWriter.writeDataHandler(localBase64Binary);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localBase64Binary == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localBase64Binary)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Base64Binary parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Base64Binary object =
                    new Base64Binary();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "base64Binary").equals(reader.getName())) {
                                reader.next();
                                if (isReaderMTOMAware(reader)
                                    && java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_BINARY))) {
                                    /* MTOM aware reader - get the datahandler directly and put it in the object */
                                    object.setBase64Binary(
                                        (javax.activation.DataHandler)reader.getProperty(org.apache.axiom.om.OMConstants.DATA_HANDLER));
                                } else {
                                    if (reader.getEventType() == javax.xml.stream.XMLStreamConstants.START_ELEMENT && reader.getName().equals(new javax.xml.namespace.QName(org.apache.axiom.om.impl.MTOMConstants.XOP_NAMESPACE_URI, org.apache.axiom.om.impl.MTOMConstants.XOP_INCLUDE))) {
                                        java.lang.String id = org.apache.axiom.om.util.ElementHelper.getContentID(reader, "UTF-8");
                                        object.setBase64Binary(((org.apache.axiom.soap.impl.builder.MTOMStAXSOAPModelBuilder)((org.apache.axiom.om.impl.llom.OMStAXWrapper)reader).getBuilder()).getDataHandler(id));
                                        reader.next();
                                    } else if (reader.hasText()) {
                                        /* Do the usual conversion */
                                        java.lang.String content = reader.getText();
                                        object.setBase64Binary(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(content));
                                    }
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfTranslateArrayResponse
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = ArrayOfTranslateArrayResponse
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslateArrayResponse
         * This was an Array!
         */
        protected TranslateArrayResponse[] localTranslateArrayResponse;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslateArrayResponseTracker = false;
        /**
         * Auto generated getter method
         * @return TranslateArrayResponse[]
         */
        public TranslateArrayResponse[] getTranslateArrayResponse()
        {
            return localTranslateArrayResponse;
        }
        /**
         * validate the array for TranslateArrayResponse
         */
        protected void validateTranslateArrayResponse(TranslateArrayResponse[] param) {}
        /**
         * Auto generated setter method
         * @param param TranslateArrayResponse
         */
        public void setTranslateArrayResponse(TranslateArrayResponse[] param)
        {
            validateTranslateArrayResponse(param);
            if (param != null) {
                /* update the setting tracker */
                localTranslateArrayResponseTracker = true;
            } else {
                localTranslateArrayResponseTracker = true;
            }
            this.localTranslateArrayResponse = param;
        }
        /**
         * Auto generated add method for the array for convenience
         * @param param TranslateArrayResponse
         */
        public void addTranslateArrayResponse(TranslateArrayResponse param)
        {
            if (localTranslateArrayResponse == null) {
                localTranslateArrayResponse = new TranslateArrayResponse[] {};
            }
            /* update the setting tracker */
            localTranslateArrayResponseTracker = true;
            java.util.List list =
                org.apache.axis2.databinding.utils.ConverterUtil.toList(localTranslateArrayResponse);
            list.add(param);
            this.localTranslateArrayResponse =
                (TranslateArrayResponse[])list.toArray(
                    new TranslateArrayResponse[list.size()]);
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfTranslateArrayResponse.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":ArrayOfTranslateArrayResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "ArrayOfTranslateArrayResponse",
                                   xmlWriter);
                }
            }
            if (localTranslateArrayResponseTracker) {
                if (localTranslateArrayResponse != null) {
                    for (int i = 0; i < localTranslateArrayResponse.length; i++) {
                        if (localTranslateArrayResponse[i] != null) {
                            localTranslateArrayResponse[i].serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslateArrayResponse"),
                                                                     factory, xmlWriter);
                        } else {
                            /* write null attribute */
                            java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                            if (!namespace2.equals("")) {
                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                                if (prefix2 == null) {
                                    prefix2 = generatePrefix(namespace2);
                                    xmlWriter.writeStartElement(prefix2, "TranslateArrayResponse", namespace2);
                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                    xmlWriter.setPrefix(prefix2, namespace2);
                                } else {
                                    xmlWriter.writeStartElement(namespace2, "TranslateArrayResponse");
                                }
                            } else {
                                xmlWriter.writeStartElement("TranslateArrayResponse");
                            }
                            /* write the nil attribute */
                            writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    /* write null attribute */
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "TranslateArrayResponse", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "TranslateArrayResponse");
                        }
                    } else {
                        xmlWriter.writeStartElement("TranslateArrayResponse");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localTranslateArrayResponseTracker) {
                if (localTranslateArrayResponse != null) {
                    for (int i = 0; i < localTranslateArrayResponse.length; i++) {
                        if (localTranslateArrayResponse[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "TranslateArrayResponse"));
                            elementList.add(localTranslateArrayResponse[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "TranslateArrayResponse"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                  "TranslateArrayResponse"));
                    elementList.add(localTranslateArrayResponse);
                }
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfTranslateArrayResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfTranslateArrayResponse object =
                    new ArrayOfTranslateArrayResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"ArrayOfTranslateArrayResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfTranslateArrayResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    java.util.ArrayList list1 = new java.util.ArrayList();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslateArrayResponse").equals(reader.getName())) {
                        /* Process the array and step past its final element's end. */
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(TranslateArrayResponse.Factory.parse(reader));
                        }
                        /* loop until we find a start element that is not part of this array */
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            /* We should be at the end element, but make sure */
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            /* Step out of this element */
                            reader.next();
                            /* Step to next element event. */
                            while (!reader.isStartElement() && !reader.isEndElement()) {
                                reader.next();
                            }
                            if (reader.isEndElement()) {
                                /* two continuous end elements means we are exiting the xml structure */
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslateArrayResponse").equals(reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(TranslateArrayResponse.Factory.parse(reader));
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        /* call the converter utility  to convert and set the array */
                        object.setTranslateArrayResponse((TranslateArrayResponse[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                             TranslateArrayResponse.class,
                                                             list1));
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetTranslationsResponse0
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetTranslationsResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetTranslationsResult
         */
        protected GetTranslationsResponse localGetTranslationsResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetTranslationsResultTracker = false;
        /**
         * Auto generated getter method
         * @return GetTranslationsResponse
         */
        public GetTranslationsResponse getGetTranslationsResult()
        {
            return localGetTranslationsResult;
        }
        /**
         * Auto generated setter method
         * @param param GetTranslationsResult
         */
        public void setGetTranslationsResult(GetTranslationsResponse param)
        {
            if (param != null) {
                /* update the setting tracker */
                localGetTranslationsResultTracker = true;
            } else {
                localGetTranslationsResultTracker = true;
            }
            this.localGetTranslationsResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetTranslationsResponse0.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetTranslationsResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetTranslationsResponse",
                                   xmlWriter);
                }
            }
            if (localGetTranslationsResultTracker) {
                if (localGetTranslationsResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "GetTranslationsResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "GetTranslationsResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("GetTranslationsResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localGetTranslationsResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetTranslationsResult"),
                                                         factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetTranslationsResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "GetTranslationsResult"));
                elementList.add(localGetTranslationsResult == null ? null
                                : localGetTranslationsResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetTranslationsResponse0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetTranslationsResponse0 object =
                    new GetTranslationsResponse0();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetTranslationsResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetTranslationsResponse0) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetTranslationsResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setGetTranslationsResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setGetTranslationsResult(GetTranslationsResponse.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _int
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "int",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _int
         */
        protected int local_int;
        /**
         * Auto generated getter method
         * @return int
         */
        public int get_int()
        {
            return local_int;
        }
        /**
         * Auto generated setter method
         * @param param _int
         */
        public void set_int(int param)
        {
            this.local_int = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _int.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "int";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":int",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "int",
                                   xmlWriter);
                }
            }
            if (local_int == java.lang.Integer.MIN_VALUE) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _int parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _int object =
                    new _int();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        object.set_int(java.lang.Integer.MIN_VALUE);
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "int").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_int(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                } else {
                                    object.set_int(java.lang.Integer.MIN_VALUE);
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class DurationE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "duration",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Duration
         */
        protected Duration localDuration;
        /**
         * Auto generated getter method
         * @return Duration
         */
        public Duration getDuration()
        {
            return localDuration;
        }
        /**
         * Auto generated setter method
         * @param param Duration
         */
        public void setDuration(Duration param)
        {
            this.localDuration = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    DurationE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localDuration == null) {
                java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "duration", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "duration");
                    }
                } else {
                    xmlWriter.writeStartElement("duration");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localDuration.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localDuration == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localDuration.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DurationE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                DurationE object =
                    new DurationE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "duration").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setDuration(null);
                                    reader.next();
                                } else {
                                    object.setDuration(Duration.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _double
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "double",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _double
         */
        protected double local_double;
        /**
         * Auto generated getter method
         * @return double
         */
        public double get_double()
        {
            return local_double;
        }
        /**
         * Auto generated setter method
         * @param param _double
         */
        public void set_double(double param)
        {
            this.local_double = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _double.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "double";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":double",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "double",
                                   xmlWriter);
                }
            }
            if (java.lang.Double.isNaN(local_double)) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_double));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_double)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _double parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _double object =
                    new _double();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        object.set_double(java.lang.Double.NaN);
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "double").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_double(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(content));
                                } else {
                                    object.set_double(java.lang.Double.NaN);
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GuidE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "guid",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Guid
         */
        protected Guid localGuid;
        /**
         * Auto generated getter method
         * @return Guid
         */
        public Guid getGuid()
        {
            return localGuid;
        }
        /**
         * Auto generated setter method
         * @param param Guid
         */
        public void setGuid(Guid param)
        {
            this.localGuid = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GuidE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localGuid == null) {
                java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "guid", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "guid");
                    }
                } else {
                    xmlWriter.writeStartElement("guid");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localGuid.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localGuid == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localGuid.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GuidE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GuidE object =
                    new GuidE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "guid").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setGuid(null);
                                    reader.next();
                                } else {
                                    object.setGuid(Guid.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _boolean
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "boolean",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _boolean
         */
        protected boolean local_boolean;
        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean get_boolean()
        {
            return local_boolean;
        }
        /**
         * Auto generated setter method
         * @param param _boolean
         */
        public void set_boolean(boolean param)
        {
            this.local_boolean = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _boolean.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "boolean";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":boolean",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "boolean",
                                   xmlWriter);
                }
            }
            if (false) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_boolean));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_boolean)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _boolean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _boolean object =
                    new _boolean();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "boolean").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_boolean(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class BreakSentences
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "BreakSentences",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Text
         */
        protected java.lang.String localText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText()
        {
            return localText;
        }
        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextTracker = true;
            } else {
                localTextTracker = true;
            }
            this.localText = param;
        }
        /**
         * field for Language
         */
        protected java.lang.String localLanguage;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLanguageTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLanguage()
        {
            return localLanguage;
        }
        /**
         * Auto generated setter method
         * @param param Language
         */
        public void setLanguage(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localLanguageTracker = true;
            } else {
                localLanguageTracker = true;
            }
            this.localLanguage = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    BreakSentences.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":BreakSentences",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "BreakSentences",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "text", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "text");
                    }
                } else {
                    xmlWriter.writeStartElement("text");
                }
                if (localText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localText);
                }
                xmlWriter.writeEndElement();
            }
            if (localLanguageTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "language", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "language");
                    }
                } else {
                    xmlWriter.writeStartElement("language");
                }
                if (localLanguage == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localLanguage);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "text"));
                elementList.add(localText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
            }
            if (localLanguageTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "language"));
                elementList.add(localLanguage == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLanguage));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BreakSentences parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                BreakSentences object =
                    new BreakSentences();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"BreakSentences".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (BreakSentences) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "text").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "language").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setLanguage(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "TranslateResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslateResult
         */
        protected java.lang.String localTranslateResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslateResultTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTranslateResult()
        {
            return localTranslateResult;
        }
        /**
         * Auto generated setter method
         * @param param TranslateResult
         */
        public void setTranslateResult(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslateResultTracker = true;
            } else {
                localTranslateResultTracker = true;
            }
            this.localTranslateResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":TranslateResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "TranslateResponse",
                                   xmlWriter);
                }
            }
            if (localTranslateResultTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "TranslateResult", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "TranslateResult");
                    }
                } else {
                    xmlWriter.writeStartElement("TranslateResult");
                }
                if (localTranslateResult == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTranslateResult);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localTranslateResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "TranslateResult"));
                elementList.add(localTranslateResult == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTranslateResult));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateResponse object =
                    new TranslateResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"TranslateResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TranslateResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "TranslateResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTranslateResult(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class DetectArray
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "DetectArray",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Texts
         */
        protected ArrayOfstring localTexts;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getTexts()
        {
            return localTexts;
        }
        /**
         * Auto generated setter method
         * @param param Texts
         */
        public void setTexts(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextsTracker = true;
            } else {
                localTextsTracker = true;
            }
            this.localTexts = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    DetectArray.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":DetectArray",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "DetectArray",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextsTracker) {
                if (localTexts == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "texts", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "texts");
                        }
                    } else {
                        xmlWriter.writeStartElement("texts");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTexts.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "texts"),
                                         factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "texts"));
                elementList.add(localTexts == null ? null
                                : localTexts);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DetectArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                DetectArray object =
                    new DetectArray();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"DetectArray".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DetectArray) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "texts").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTexts(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTexts(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetLanguagesForSpeakResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetLanguagesForSpeakResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetLanguagesForSpeakResult
         */
        protected ArrayOfstring localGetLanguagesForSpeakResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetLanguagesForSpeakResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getGetLanguagesForSpeakResult()
        {
            return localGetLanguagesForSpeakResult;
        }
        /**
         * Auto generated setter method
         * @param param GetLanguagesForSpeakResult
         */
        public void setGetLanguagesForSpeakResult(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localGetLanguagesForSpeakResultTracker = true;
            } else {
                localGetLanguagesForSpeakResultTracker = true;
            }
            this.localGetLanguagesForSpeakResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetLanguagesForSpeakResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetLanguagesForSpeakResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetLanguagesForSpeakResponse",
                                   xmlWriter);
                }
            }
            if (localGetLanguagesForSpeakResultTracker) {
                if (localGetLanguagesForSpeakResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "GetLanguagesForSpeakResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "GetLanguagesForSpeakResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("GetLanguagesForSpeakResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localGetLanguagesForSpeakResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetLanguagesForSpeakResult"),
                                                              factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetLanguagesForSpeakResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "GetLanguagesForSpeakResult"));
                elementList.add(localGetLanguagesForSpeakResult == null ? null
                                : localGetLanguagesForSpeakResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetLanguagesForSpeakResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetLanguagesForSpeakResponse object =
                    new GetLanguagesForSpeakResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetLanguagesForSpeakResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetLanguagesForSpeakResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetLanguagesForSpeakResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setGetLanguagesForSpeakResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setGetLanguagesForSpeakResult(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfint
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = ArrayOfint
        Namespace URI = http://schemas.microsoft.com/2003/10/Serialization/Arrays
        Namespace Prefix = ns1
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/Arrays")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _int
         * This was an Array!
         */
        protected int[] local_int;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_intTracker = false;
        /**
         * Auto generated getter method
         * @return int[]
         */
        public int[] get_int()
        {
            return local_int;
        }
        /**
         * validate the array for _int
         */
        protected void validate_int(int[] param) {}
        /**
         * Auto generated setter method
         * @param param _int
         */
        public void set_int(int[] param)
        {
            validate_int(param);
            if (param != null) {
                /* update the setting tracker */
                local_intTracker = true;
            } else {
                local_intTracker = false;
            }
            this.local_int = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfint.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/Arrays");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":ArrayOfint",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "ArrayOfint",
                                   xmlWriter);
                }
            }
            if (local_intTracker) {
                if (local_int != null) {
                    namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
                    boolean emptyNamespace = namespace == null || namespace.length() == 0;
                    prefix = emptyNamespace ? null : xmlWriter.getPrefix(namespace);
                    for (int i = 0; i < local_int.length; i++) {
                        if (local_int[i] != java.lang.Integer.MIN_VALUE) {
                            if (!emptyNamespace) {
                                if (prefix == null) {
                                    java.lang.String prefix2 = generatePrefix(namespace);
                                    xmlWriter.writeStartElement(prefix2, "int", namespace);
                                    xmlWriter.writeNamespace(prefix2, namespace);
                                    xmlWriter.setPrefix(prefix2, namespace);
                                } else {
                                    xmlWriter.writeStartElement(namespace, "int");
                                }
                            } else {
                                xmlWriter.writeStartElement("int");
                            }
                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int[i]));
                            xmlWriter.writeEndElement();
                        } else {
                            /* we have to do nothing since minOccurs is zero */
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("int cannot be null!!");
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (local_intTracker) {
                if (local_int != null) {
                    for (int i = 0; i < local_int.length; i++) {
                        elementList.add(new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays",
                                                                      "int"));
                        elementList.add(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int[i]));
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException("int cannot be null!!");
                }
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfint parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfint object =
                    new ArrayOfint();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"ArrayOfint".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfint) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    java.util.ArrayList list1 = new java.util.ArrayList();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "int").equals(reader.getName())) {
                        /* Process the array and step past its final element's end. */
                        list1.add(reader.getElementText());
                        /* loop until we find a start element that is not part of this array */
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            /* Ensure we are at the EndElement */
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            /* Step out of this element */
                            reader.next();
                            /* Step to next element event. */
                            while (!reader.isStartElement() && !reader.isEndElement()) {
                                reader.next();
                            }
                            if (reader.isEndElement()) {
                                /* two continuous end elements means we are exiting the xml structure */
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "int").equals(reader.getName())) {
                                    list1.add(reader.getElementText());
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        /* call the converter utility  to convert and set the array */
                        object.set_int((int[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                           int.class, list1));
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class String
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "string",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for String
         */
        protected java.lang.String localString;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getString()
        {
            return localString;
        }
        /**
         * Auto generated setter method
         * @param param String
         */
        public void setString(java.lang.String param)
        {
            this.localString = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    String.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "string";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":string",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "string",
                                   xmlWriter);
                }
            }
            if (localString == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(localString);
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localString == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static String parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                String object =
                    new String();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "string").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setString(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfTranslateArrayResponseE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "ArrayOfTranslateArrayResponse",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for ArrayOfTranslateArrayResponse
         */
        protected ArrayOfTranslateArrayResponse localArrayOfTranslateArrayResponse;
        /**
         * Auto generated getter method
         * @return ArrayOfTranslateArrayResponse
         */
        public ArrayOfTranslateArrayResponse getArrayOfTranslateArrayResponse()
        {
            return localArrayOfTranslateArrayResponse;
        }
        /**
         * Auto generated setter method
         * @param param ArrayOfTranslateArrayResponse
         */
        public void setArrayOfTranslateArrayResponse(ArrayOfTranslateArrayResponse param)
        {
            this.localArrayOfTranslateArrayResponse = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfTranslateArrayResponseE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfTranslateArrayResponse == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ArrayOfTranslateArrayResponse", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ArrayOfTranslateArrayResponse");
                    }
                } else {
                    xmlWriter.writeStartElement("ArrayOfTranslateArrayResponse");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localArrayOfTranslateArrayResponse.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfTranslateArrayResponse == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localArrayOfTranslateArrayResponse.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfTranslateArrayResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfTranslateArrayResponseE object =
                    new ArrayOfTranslateArrayResponseE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "ArrayOfTranslateArrayResponse").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setArrayOfTranslateArrayResponse(null);
                                    reader.next();
                                } else {
                                    object.setArrayOfTranslateArrayResponse(ArrayOfTranslateArrayResponse.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class SpeakResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "SpeakResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for SpeakResult
         */
        protected java.lang.String localSpeakResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSpeakResultTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSpeakResult()
        {
            return localSpeakResult;
        }
        /**
         * Auto generated setter method
         * @param param SpeakResult
         */
        public void setSpeakResult(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localSpeakResultTracker = true;
            } else {
                localSpeakResultTracker = true;
            }
            this.localSpeakResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    SpeakResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":SpeakResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "SpeakResponse",
                                   xmlWriter);
                }
            }
            if (localSpeakResultTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "SpeakResult", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "SpeakResult");
                    }
                } else {
                    xmlWriter.writeStartElement("SpeakResult");
                }
                if (localSpeakResult == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localSpeakResult);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localSpeakResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "SpeakResult"));
                elementList.add(localSpeakResult == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSpeakResult));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SpeakResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                SpeakResponse object =
                    new SpeakResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"SpeakResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (SpeakResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "SpeakResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setSpeakResult(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfTranslation
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = ArrayOfTranslation
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Translation
         * This was an Array!
         */
        protected Translation[] localTranslation;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslationTracker = false;
        /**
         * Auto generated getter method
         * @return Translation[]
         */
        public Translation[] getTranslation()
        {
            return localTranslation;
        }
        /**
         * validate the array for Translation
         */
        protected void validateTranslation(Translation[] param) {}
        /**
         * Auto generated setter method
         * @param param Translation
         */
        public void setTranslation(Translation[] param)
        {
            validateTranslation(param);
            if (param != null) {
                /* update the setting tracker */
                localTranslationTracker = true;
            } else {
                localTranslationTracker = true;
            }
            this.localTranslation = param;
        }
        /**
         * Auto generated add method for the array for convenience
         * @param param Translation
         */
        public void addTranslation(Translation param)
        {
            if (localTranslation == null) {
                localTranslation = new Translation[] {};
            }
            /* update the setting tracker */
            localTranslationTracker = true;
            java.util.List list =
                org.apache.axis2.databinding.utils.ConverterUtil.toList(localTranslation);
            list.add(param);
            this.localTranslation =
                (Translation[])list.toArray(
                    new Translation[list.size()]);
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfTranslation.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":ArrayOfTranslation",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "ArrayOfTranslation",
                                   xmlWriter);
                }
            }
            if (localTranslationTracker) {
                if (localTranslation != null) {
                    for (int i = 0; i < localTranslation.length; i++) {
                        if (localTranslation[i] != null) {
                            localTranslation[i].serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Translation"),
                                                          factory, xmlWriter);
                        } else {
                            /* write null attribute */
                            java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                            if (!namespace2.equals("")) {
                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                                if (prefix2 == null) {
                                    prefix2 = generatePrefix(namespace2);
                                    xmlWriter.writeStartElement(prefix2, "Translation", namespace2);
                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                    xmlWriter.setPrefix(prefix2, namespace2);
                                } else {
                                    xmlWriter.writeStartElement(namespace2, "Translation");
                                }
                            } else {
                                xmlWriter.writeStartElement("Translation");
                            }
                            /* write the nil attribute */
                            writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    /* write null attribute */
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "Translation", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "Translation");
                        }
                    } else {
                        xmlWriter.writeStartElement("Translation");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localTranslationTracker) {
                if (localTranslation != null) {
                    for (int i = 0; i < localTranslation.length; i++) {
                        if (localTranslation[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "Translation"));
                            elementList.add(localTranslation[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "Translation"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                  "Translation"));
                    elementList.add(localTranslation);
                }
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfTranslation parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfTranslation object =
                    new ArrayOfTranslation();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"ArrayOfTranslation".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfTranslation) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    java.util.ArrayList list1 = new java.util.ArrayList();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Translation").equals(reader.getName())) {
                        /* Process the array and step past its final element's end. */
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(Translation.Factory.parse(reader));
                        }
                        /* loop until we find a start element that is not part of this array */
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            /* We should be at the end element, but make sure */
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            /* Step out of this element */
                            reader.next();
                            /* Step to next element event. */
                            while (!reader.isStartElement() && !reader.isEndElement()) {
                                reader.next();
                            }
                            if (reader.isEndElement()) {
                                /* two continuous end elements means we are exiting the xml structure */
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Translation").equals(reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(Translation.Factory.parse(reader));
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        /* call the converter utility  to convert and set the array */
                        object.setTranslation((Translation[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                  Translation.class,
                                                  list1));
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfGetTranslationsResponse
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = ArrayOfGetTranslationsResponse
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetTranslationsResponse
         * This was an Array!
         */
        protected GetTranslationsResponse[] localGetTranslationsResponse;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetTranslationsResponseTracker = false;
        /**
         * Auto generated getter method
         * @return GetTranslationsResponse[]
         */
        public GetTranslationsResponse[] getGetTranslationsResponse()
        {
            return localGetTranslationsResponse;
        }
        /**
         * validate the array for GetTranslationsResponse
         */
        protected void validateGetTranslationsResponse(GetTranslationsResponse[] param) {}
        /**
         * Auto generated setter method
         * @param param GetTranslationsResponse
         */
        public void setGetTranslationsResponse(GetTranslationsResponse[] param)
        {
            validateGetTranslationsResponse(param);
            if (param != null) {
                /* update the setting tracker */
                localGetTranslationsResponseTracker = true;
            } else {
                localGetTranslationsResponseTracker = true;
            }
            this.localGetTranslationsResponse = param;
        }
        /**
         * Auto generated add method for the array for convenience
         * @param param GetTranslationsResponse
         */
        public void addGetTranslationsResponse(GetTranslationsResponse param)
        {
            if (localGetTranslationsResponse == null) {
                localGetTranslationsResponse = new GetTranslationsResponse[] {};
            }
            /* update the setting tracker */
            localGetTranslationsResponseTracker = true;
            java.util.List list =
                org.apache.axis2.databinding.utils.ConverterUtil.toList(localGetTranslationsResponse);
            list.add(param);
            this.localGetTranslationsResponse =
                (GetTranslationsResponse[])list.toArray(
                    new GetTranslationsResponse[list.size()]);
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfGetTranslationsResponse.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":ArrayOfGetTranslationsResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "ArrayOfGetTranslationsResponse",
                                   xmlWriter);
                }
            }
            if (localGetTranslationsResponseTracker) {
                if (localGetTranslationsResponse != null) {
                    for (int i = 0; i < localGetTranslationsResponse.length; i++) {
                        if (localGetTranslationsResponse[i] != null) {
                            localGetTranslationsResponse[i].serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "GetTranslationsResponse"),
                                                                      factory, xmlWriter);
                        } else {
                            /* write null attribute */
                            java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                            if (!namespace2.equals("")) {
                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                                if (prefix2 == null) {
                                    prefix2 = generatePrefix(namespace2);
                                    xmlWriter.writeStartElement(prefix2, "GetTranslationsResponse", namespace2);
                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                    xmlWriter.setPrefix(prefix2, namespace2);
                                } else {
                                    xmlWriter.writeStartElement(namespace2, "GetTranslationsResponse");
                                }
                            } else {
                                xmlWriter.writeStartElement("GetTranslationsResponse");
                            }
                            /* write the nil attribute */
                            writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    /* write null attribute */
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "GetTranslationsResponse", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "GetTranslationsResponse");
                        }
                    } else {
                        xmlWriter.writeStartElement("GetTranslationsResponse");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetTranslationsResponseTracker) {
                if (localGetTranslationsResponse != null) {
                    for (int i = 0; i < localGetTranslationsResponse.length; i++) {
                        if (localGetTranslationsResponse[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "GetTranslationsResponse"));
                            elementList.add(localGetTranslationsResponse[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "GetTranslationsResponse"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                  "GetTranslationsResponse"));
                    elementList.add(localGetTranslationsResponse);
                }
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfGetTranslationsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfGetTranslationsResponse object =
                    new ArrayOfGetTranslationsResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"ArrayOfGetTranslationsResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfGetTranslationsResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    java.util.ArrayList list1 = new java.util.ArrayList();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "GetTranslationsResponse").equals(reader.getName())) {
                        /* Process the array and step past its final element's end. */
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(GetTranslationsResponse.Factory.parse(reader));
                        }
                        /* loop until we find a start element that is not part of this array */
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            /* We should be at the end element, but make sure */
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            /* Step out of this element */
                            reader.next();
                            /* Step to next element event. */
                            while (!reader.isStartElement() && !reader.isEndElement()) {
                                reader.next();
                            }
                            if (reader.isEndElement()) {
                                /* two continuous end elements means we are exiting the xml structure */
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "GetTranslationsResponse").equals(reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(GetTranslationsResponse.Factory.parse(reader));
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        /* call the converter utility  to convert and set the array */
                        object.setGetTranslationsResponse((GetTranslationsResponse[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                              GetTranslationsResponse.class,
                                                              list1));
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetLanguagesForTranslateResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetLanguagesForTranslateResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetLanguagesForTranslateResult
         */
        protected ArrayOfstring localGetLanguagesForTranslateResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetLanguagesForTranslateResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getGetLanguagesForTranslateResult()
        {
            return localGetLanguagesForTranslateResult;
        }
        /**
         * Auto generated setter method
         * @param param GetLanguagesForTranslateResult
         */
        public void setGetLanguagesForTranslateResult(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localGetLanguagesForTranslateResultTracker = true;
            } else {
                localGetLanguagesForTranslateResultTracker = true;
            }
            this.localGetLanguagesForTranslateResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetLanguagesForTranslateResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetLanguagesForTranslateResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetLanguagesForTranslateResponse",
                                   xmlWriter);
                }
            }
            if (localGetLanguagesForTranslateResultTracker) {
                if (localGetLanguagesForTranslateResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "GetLanguagesForTranslateResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "GetLanguagesForTranslateResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("GetLanguagesForTranslateResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localGetLanguagesForTranslateResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetLanguagesForTranslateResult"),
                                                                  factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetLanguagesForTranslateResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "GetLanguagesForTranslateResult"));
                elementList.add(localGetLanguagesForTranslateResult == null ? null
                                : localGetLanguagesForTranslateResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetLanguagesForTranslateResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetLanguagesForTranslateResponse object =
                    new GetLanguagesForTranslateResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetLanguagesForTranslateResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetLanguagesForTranslateResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetLanguagesForTranslateResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setGetLanguagesForTranslateResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setGetLanguagesForTranslateResult(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfstringE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/Arrays",
            "ArrayOfstring",
            "ns1");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/Arrays")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for ArrayOfstring
         */
        protected ArrayOfstring localArrayOfstring;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getArrayOfstring()
        {
            return localArrayOfstring;
        }
        /**
         * Auto generated setter method
         * @param param ArrayOfstring
         */
        public void setArrayOfstring(ArrayOfstring param)
        {
            this.localArrayOfstring = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfstringE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfstring == null) {
                java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ArrayOfstring", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ArrayOfstring");
                    }
                } else {
                    xmlWriter.writeStartElement("ArrayOfstring");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localArrayOfstring.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfstring == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localArrayOfstring.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfstringE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfstringE object =
                    new ArrayOfstringE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "ArrayOfstring").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setArrayOfstring(null);
                                    reader.next();
                                } else {
                                    object.setArrayOfstring(ArrayOfstring.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetTranslationsResponseE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "GetTranslationsResponse",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetTranslationsResponse
         */
        protected GetTranslationsResponse localGetTranslationsResponse;
        /**
         * Auto generated getter method
         * @return GetTranslationsResponse
         */
        public GetTranslationsResponse getGetTranslationsResponse()
        {
            return localGetTranslationsResponse;
        }
        /**
         * Auto generated setter method
         * @param param GetTranslationsResponse
         */
        public void setGetTranslationsResponse(GetTranslationsResponse param)
        {
            this.localGetTranslationsResponse = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetTranslationsResponseE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localGetTranslationsResponse == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "GetTranslationsResponse", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "GetTranslationsResponse");
                    }
                } else {
                    xmlWriter.writeStartElement("GetTranslationsResponse");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localGetTranslationsResponse.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localGetTranslationsResponse == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localGetTranslationsResponse.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetTranslationsResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetTranslationsResponseE object =
                    new GetTranslationsResponseE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "GetTranslationsResponse").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setGetTranslationsResponse(null);
                                    reader.next();
                                } else {
                                    object.setGetTranslationsResponse(GetTranslationsResponse.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class UnsignedInt
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "unsignedInt",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for UnsignedInt
         */
        protected org.apache.axis2.databinding.types.UnsignedInt localUnsignedInt;
        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.UnsignedInt
         */
        public org.apache.axis2.databinding.types.UnsignedInt getUnsignedInt()
        {
            return localUnsignedInt;
        }
        /**
         * Auto generated setter method
         * @param param UnsignedInt
         */
        public void setUnsignedInt(org.apache.axis2.databinding.types.UnsignedInt param)
        {
            this.localUnsignedInt = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    UnsignedInt.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "unsignedInt";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":unsignedInt",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "unsignedInt",
                                   xmlWriter);
                }
            }
            if (localUnsignedInt == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedInt));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localUnsignedInt == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedInt)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UnsignedInt parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                UnsignedInt object =
                    new UnsignedInt();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "unsignedInt").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setUnsignedInt(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedInt(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class UnsignedLong
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "unsignedLong",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for UnsignedLong
         */
        protected org.apache.axis2.databinding.types.UnsignedLong localUnsignedLong;
        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.UnsignedLong
         */
        public org.apache.axis2.databinding.types.UnsignedLong getUnsignedLong()
        {
            return localUnsignedLong;
        }
        /**
         * Auto generated setter method
         * @param param UnsignedLong
         */
        public void setUnsignedLong(org.apache.axis2.databinding.types.UnsignedLong param)
        {
            this.localUnsignedLong = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    UnsignedLong.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "unsignedLong";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":unsignedLong",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "unsignedLong",
                                   xmlWriter);
                }
            }
            if (localUnsignedLong == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedLong));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localUnsignedLong == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedLong)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UnsignedLong parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                UnsignedLong object =
                    new UnsignedLong();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "unsignedLong").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setUnsignedLong(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedLong(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class AnyType
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "anyType",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AnyType
         */
        protected java.lang.Object localAnyType;
        /**
         * Auto generated getter method
         * @return java.lang.Object
         */
        public java.lang.Object getAnyType()
        {
            return localAnyType;
        }
        /**
         * Auto generated setter method
         * @param param AnyType
         */
        public void setAnyType(java.lang.Object param)
        {
            this.localAnyType = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    AnyType.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "anyType";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":anyType",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "anyType",
                                   xmlWriter);
                }
            }
            if (localAnyType == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                org.apache.axis2.databinding.utils.ConverterUtil.serializeAnyType(localAnyType, xmlWriter);
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localAnyType == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAnyType)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AnyType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                AnyType object =
                    new AnyType();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "anyType").equals(reader.getName())) {
                                object.setAnyType(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,
                                                                                                                    ExtensionMapper.class ));
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class AddTranslationArrayResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "AddTranslationArrayResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    AddTranslationArrayResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":AddTranslationArrayResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "AddTranslationArrayResponse",
                                   xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AddTranslationArrayResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                AddTranslationArrayResponse object =
                    new AddTranslationArrayResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"AddTranslationArrayResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddTranslationArrayResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class QName
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "QName",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for QName
         */
        protected javax.xml.namespace.QName localQName;
        /**
         * Auto generated getter method
         * @return javax.xml.namespace.QName
         */
        public javax.xml.namespace.QName getQName()
        {
            return localQName;
        }
        /**
         * Auto generated setter method
         * @param param QName
         */
        public void setQName(javax.xml.namespace.QName param)
        {
            this.localQName = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    QName.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "QName";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":QName",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "QName",
                                   xmlWriter);
                }
            }
            if (localQName == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                writeQName(localQName, xmlWriter);
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localQName == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQName)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static QName parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                QName object =
                    new QName();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "QName").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    int index = content.indexOf(":");
                                    if (index > 0) {
                                        prefix = content.substring(0, index);
                                    } else {
                                        prefix = "";
                                    }
                                    namespaceuri = reader.getNamespaceURI(prefix);
                                    object.setQName(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToQName(content, namespaceuri));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetTranslationsArray
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetTranslationsArray",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Texts
         */
        protected ArrayOfstring localTexts;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getTexts()
        {
            return localTexts;
        }
        /**
         * Auto generated setter method
         * @param param Texts
         */
        public void setTexts(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextsTracker = true;
            } else {
                localTextsTracker = true;
            }
            this.localTexts = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for To
         */
        protected java.lang.String localTo;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTo()
        {
            return localTo;
        }
        /**
         * Auto generated setter method
         * @param param To
         */
        public void setTo(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localToTracker = true;
            } else {
                localToTracker = true;
            }
            this.localTo = param;
        }
        /**
         * field for MaxTranslations
         */
        protected int localMaxTranslations;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaxTranslationsTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getMaxTranslations()
        {
            return localMaxTranslations;
        }
        /**
         * Auto generated setter method
         * @param param MaxTranslations
         */
        public void setMaxTranslations(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localMaxTranslationsTracker = false;
            } else {
                localMaxTranslationsTracker = true;
            }
            this.localMaxTranslations = param;
        }
        /**
         * field for Options
         */
        protected TranslateOptions localOptions;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionsTracker = false;
        /**
         * Auto generated getter method
         * @return TranslateOptions
         */
        public TranslateOptions getOptions()
        {
            return localOptions;
        }
        /**
         * Auto generated setter method
         * @param param Options
         */
        public void setOptions(TranslateOptions param)
        {
            if (param != null) {
                /* update the setting tracker */
                localOptionsTracker = true;
            } else {
                localOptionsTracker = true;
            }
            this.localOptions = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetTranslationsArray.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetTranslationsArray",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetTranslationsArray",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextsTracker) {
                if (localTexts == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "texts", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "texts");
                        }
                    } else {
                        xmlWriter.writeStartElement("texts");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTexts.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "texts"),
                                         factory, xmlWriter);
                }
            }
            if (localFromTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "from", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "from");
                    }
                } else {
                    xmlWriter.writeStartElement("from");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localToTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "to", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "to");
                    }
                } else {
                    xmlWriter.writeStartElement("to");
                }
                if (localTo == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTo);
                }
                xmlWriter.writeEndElement();
            }
            if (localMaxTranslationsTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "maxTranslations", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "maxTranslations");
                    }
                } else {
                    xmlWriter.writeStartElement("maxTranslations");
                }
                if (localMaxTranslations == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("maxTranslations cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxTranslations));
                }
                xmlWriter.writeEndElement();
            }
            if (localOptionsTracker) {
                if (localOptions == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "options", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "options");
                        }
                    } else {
                        xmlWriter.writeStartElement("options");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOptions.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options"),
                                           factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "texts"));
                elementList.add(localTexts == null ? null
                                : localTexts);
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "from"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localToTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "to"));
                elementList.add(localTo == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTo));
            }
            if (localMaxTranslationsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "maxTranslations"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxTranslations));
            }
            if (localOptionsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "options"));
                elementList.add(localOptions == null ? null
                                : localOptions);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetTranslationsArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetTranslationsArray object =
                    new GetTranslationsArray();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetTranslationsArray".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetTranslationsArray) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "texts").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTexts(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTexts(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "from").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "to").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTo(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "maxTranslations").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setMaxTranslations(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setMaxTranslations(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setOptions(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setOptions(TranslateOptions.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Detect
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "Detect",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Text
         */
        protected java.lang.String localText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText()
        {
            return localText;
        }
        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextTracker = true;
            } else {
                localTextTracker = true;
            }
            this.localText = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Detect.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":Detect",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "Detect",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "text", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "text");
                    }
                } else {
                    xmlWriter.writeStartElement("text");
                }
                if (localText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localText);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "text"));
                elementList.add(localText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Detect parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Detect object =
                    new Detect();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"Detect".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Detect) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "text").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetTranslationsResponse
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = GetTranslationsResponse
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for State
         */
        protected java.lang.String localState;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStateTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getState()
        {
            return localState;
        }
        /**
         * Auto generated setter method
         * @param param State
         */
        public void setState(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localStateTracker = true;
            } else {
                localStateTracker = true;
            }
            this.localState = param;
        }
        /**
         * field for Translations
         */
        protected ArrayOfTranslationMatch localTranslations;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslationsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfTranslationMatch
         */
        public ArrayOfTranslationMatch getTranslations()
        {
            return localTranslations;
        }
        /**
         * Auto generated setter method
         * @param param Translations
         */
        public void setTranslations(ArrayOfTranslationMatch param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslationsTracker = true;
            } else {
                localTranslationsTracker = true;
            }
            this.localTranslations = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetTranslationsResponse.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetTranslationsResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetTranslationsResponse",
                                   xmlWriter);
                }
            }
            if (localFromTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "From", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "From");
                    }
                } else {
                    xmlWriter.writeStartElement("From");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localStateTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "State", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "State");
                    }
                } else {
                    xmlWriter.writeStartElement("State");
                }
                if (localState == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localState);
                }
                xmlWriter.writeEndElement();
            }
            if (localTranslationsTracker) {
                if (localTranslations == null) {
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "Translations", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "Translations");
                        }
                    } else {
                        xmlWriter.writeStartElement("Translations");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTranslations.serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Translations"),
                                                factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "From"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localStateTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "State"));
                elementList.add(localState == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localState));
            }
            if (localTranslationsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Translations"));
                elementList.add(localTranslations == null ? null
                                : localTranslations);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetTranslationsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetTranslationsResponse object =
                    new GetTranslationsResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetTranslationsResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetTranslationsResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "From").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "State").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setState(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Translations").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTranslations(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTranslations(ArrayOfTranslationMatch.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetAppIdTokenResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetAppIdTokenResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetAppIdTokenResult
         */
        protected java.lang.String localGetAppIdTokenResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetAppIdTokenResultTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGetAppIdTokenResult()
        {
            return localGetAppIdTokenResult;
        }
        /**
         * Auto generated setter method
         * @param param GetAppIdTokenResult
         */
        public void setGetAppIdTokenResult(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localGetAppIdTokenResultTracker = true;
            } else {
                localGetAppIdTokenResultTracker = true;
            }
            this.localGetAppIdTokenResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetAppIdTokenResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetAppIdTokenResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetAppIdTokenResponse",
                                   xmlWriter);
                }
            }
            if (localGetAppIdTokenResultTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "GetAppIdTokenResult", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "GetAppIdTokenResult");
                    }
                } else {
                    xmlWriter.writeStartElement("GetAppIdTokenResult");
                }
                if (localGetAppIdTokenResult == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localGetAppIdTokenResult);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetAppIdTokenResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "GetAppIdTokenResult"));
                elementList.add(localGetAppIdTokenResult == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGetAppIdTokenResult));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetAppIdTokenResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetAppIdTokenResponse object =
                    new GetAppIdTokenResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetAppIdTokenResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetAppIdTokenResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetAppIdTokenResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setGetAppIdTokenResult(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _byte
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "byte",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _byte
         */
        protected byte local_byte;
        /**
         * Auto generated getter method
         * @return byte
         */
        public byte get_byte()
        {
            return local_byte;
        }
        /**
         * Auto generated setter method
         * @param param _byte
         */
        public void set_byte(byte param)
        {
            this.local_byte = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _byte.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "byte";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":byte",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "byte",
                                   xmlWriter);
                }
            }
            if (local_byte == java.lang.Byte.MIN_VALUE) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_byte));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_byte)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _byte parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _byte object =
                    new _byte();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        object.set_byte(java.lang.Byte.MIN_VALUE);
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "byte").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_byte(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToByte(content));
                                } else {
                                    object.set_byte(java.lang.Byte.MIN_VALUE);
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslationE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "Translation",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Translation
         */
        protected Translation localTranslation;
        /**
         * Auto generated getter method
         * @return Translation
         */
        public Translation getTranslation()
        {
            return localTranslation;
        }
        /**
         * Auto generated setter method
         * @param param Translation
         */
        public void setTranslation(Translation param)
        {
            this.localTranslation = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslationE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslation == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Translation", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Translation");
                    }
                } else {
                    xmlWriter.writeStartElement("Translation");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localTranslation.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslation == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localTranslation.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslationE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslationE object =
                    new TranslationE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Translation").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setTranslation(null);
                                    reader.next();
                                } else {
                                    object.setTranslation(Translation.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Speak
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "Speak",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Text
         */
        protected java.lang.String localText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText()
        {
            return localText;
        }
        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextTracker = true;
            } else {
                localTextTracker = true;
            }
            this.localText = param;
        }
        /**
         * field for Language
         */
        protected java.lang.String localLanguage;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLanguageTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLanguage()
        {
            return localLanguage;
        }
        /**
         * Auto generated setter method
         * @param param Language
         */
        public void setLanguage(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localLanguageTracker = true;
            } else {
                localLanguageTracker = true;
            }
            this.localLanguage = param;
        }
        /**
         * field for Format
         */
        protected java.lang.String localFormat;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFormatTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFormat()
        {
            return localFormat;
        }
        /**
         * Auto generated setter method
         * @param param Format
         */
        public void setFormat(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFormatTracker = true;
            } else {
                localFormatTracker = true;
            }
            this.localFormat = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Speak.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":Speak",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "Speak",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "text", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "text");
                    }
                } else {
                    xmlWriter.writeStartElement("text");
                }
                if (localText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localText);
                }
                xmlWriter.writeEndElement();
            }
            if (localLanguageTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "language", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "language");
                    }
                } else {
                    xmlWriter.writeStartElement("language");
                }
                if (localLanguage == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localLanguage);
                }
                xmlWriter.writeEndElement();
            }
            if (localFormatTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "format", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "format");
                    }
                } else {
                    xmlWriter.writeStartElement("format");
                }
                if (localFormat == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFormat);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "text"));
                elementList.add(localText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
            }
            if (localLanguageTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "language"));
                elementList.add(localLanguage == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLanguage));
            }
            if (localFormatTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "format"));
                elementList.add(localFormat == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFormat));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Speak parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Speak object =
                    new Speak();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"Speak".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Speak) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "text").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "language").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setLanguage(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "format").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFormat(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetTranslationsArrayResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetTranslationsArrayResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for GetTranslationsArrayResult
         */
        protected ArrayOfGetTranslationsResponse localGetTranslationsArrayResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGetTranslationsArrayResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfGetTranslationsResponse
         */
        public ArrayOfGetTranslationsResponse getGetTranslationsArrayResult()
        {
            return localGetTranslationsArrayResult;
        }
        /**
         * Auto generated setter method
         * @param param GetTranslationsArrayResult
         */
        public void setGetTranslationsArrayResult(ArrayOfGetTranslationsResponse param)
        {
            if (param != null) {
                /* update the setting tracker */
                localGetTranslationsArrayResultTracker = true;
            } else {
                localGetTranslationsArrayResultTracker = true;
            }
            this.localGetTranslationsArrayResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetTranslationsArrayResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetTranslationsArrayResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetTranslationsArrayResponse",
                                   xmlWriter);
                }
            }
            if (localGetTranslationsArrayResultTracker) {
                if (localGetTranslationsArrayResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "GetTranslationsArrayResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "GetTranslationsArrayResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("GetTranslationsArrayResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localGetTranslationsArrayResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetTranslationsArrayResult"),
                                                              factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localGetTranslationsArrayResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "GetTranslationsArrayResult"));
                elementList.add(localGetTranslationsArrayResult == null ? null
                                : localGetTranslationsArrayResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetTranslationsArrayResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetTranslationsArrayResponse object =
                    new GetTranslationsArrayResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetTranslationsArrayResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetTranslationsArrayResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "GetTranslationsArrayResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setGetTranslationsArrayResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setGetTranslationsArrayResult(ArrayOfGetTranslationsResponse.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateOptionsE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "TranslateOptions",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslateOptions
         */
        protected TranslateOptions localTranslateOptions;
        /**
         * Auto generated getter method
         * @return TranslateOptions
         */
        public TranslateOptions getTranslateOptions()
        {
            return localTranslateOptions;
        }
        /**
         * Auto generated setter method
         * @param param TranslateOptions
         */
        public void setTranslateOptions(TranslateOptions param)
        {
            this.localTranslateOptions = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateOptionsE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslateOptions == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "TranslateOptions", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "TranslateOptions");
                    }
                } else {
                    xmlWriter.writeStartElement("TranslateOptions");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localTranslateOptions.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslateOptions == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localTranslateOptions.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateOptionsE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateOptionsE object =
                    new TranslateOptionsE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslateOptions").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setTranslateOptions(null);
                                    reader.next();
                                } else {
                                    object.setTranslateOptions(TranslateOptions.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class AddTranslationArray
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "AddTranslationArray",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Translations
         */
        protected ArrayOfTranslation localTranslations;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslationsTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfTranslation
         */
        public ArrayOfTranslation getTranslations()
        {
            return localTranslations;
        }
        /**
         * Auto generated setter method
         * @param param Translations
         */
        public void setTranslations(ArrayOfTranslation param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslationsTracker = true;
            } else {
                localTranslationsTracker = true;
            }
            this.localTranslations = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for To
         */
        protected java.lang.String localTo;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTo()
        {
            return localTo;
        }
        /**
         * Auto generated setter method
         * @param param To
         */
        public void setTo(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localToTracker = true;
            } else {
                localToTracker = true;
            }
            this.localTo = param;
        }
        /**
         * field for Options
         */
        protected TranslateOptions localOptions;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOptionsTracker = false;
        /**
         * Auto generated getter method
         * @return TranslateOptions
         */
        public TranslateOptions getOptions()
        {
            return localOptions;
        }
        /**
         * Auto generated setter method
         * @param param Options
         */
        public void setOptions(TranslateOptions param)
        {
            if (param != null) {
                /* update the setting tracker */
                localOptionsTracker = true;
            } else {
                localOptionsTracker = true;
            }
            this.localOptions = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    AddTranslationArray.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":AddTranslationArray",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "AddTranslationArray",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTranslationsTracker) {
                if (localTranslations == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "translations", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "translations");
                        }
                    } else {
                        xmlWriter.writeStartElement("translations");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTranslations.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "translations"),
                                                factory, xmlWriter);
                }
            }
            if (localFromTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "from", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "from");
                    }
                } else {
                    xmlWriter.writeStartElement("from");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localToTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "to", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "to");
                    }
                } else {
                    xmlWriter.writeStartElement("to");
                }
                if (localTo == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTo);
                }
                xmlWriter.writeEndElement();
            }
            if (localOptionsTracker) {
                if (localOptions == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "options", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "options");
                        }
                    } else {
                        xmlWriter.writeStartElement("options");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOptions.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options"),
                                           factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTranslationsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "translations"));
                elementList.add(localTranslations == null ? null
                                : localTranslations);
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "from"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localToTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "to"));
                elementList.add(localTo == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTo));
            }
            if (localOptionsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "options"));
                elementList.add(localOptions == null ? null
                                : localOptions);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AddTranslationArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                AddTranslationArray object =
                    new AddTranslationArray();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"AddTranslationArray".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddTranslationArray) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "translations").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setTranslations(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setTranslations(ArrayOfTranslation.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "from").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "to").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTo(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "options").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setOptions(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setOptions(TranslateOptions.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfintE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/Arrays",
            "ArrayOfint",
            "ns1");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/Arrays")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for ArrayOfint
         */
        protected ArrayOfint localArrayOfint;
        /**
         * Auto generated getter method
         * @return ArrayOfint
         */
        public ArrayOfint getArrayOfint()
        {
            return localArrayOfint;
        }
        /**
         * Auto generated setter method
         * @param param ArrayOfint
         */
        public void setArrayOfint(ArrayOfint param)
        {
            this.localArrayOfint = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfintE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfint == null) {
                java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ArrayOfint", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ArrayOfint");
                    }
                } else {
                    xmlWriter.writeStartElement("ArrayOfint");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localArrayOfint.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfint == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localArrayOfint.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfintE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfintE object =
                    new ArrayOfintE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "ArrayOfint").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setArrayOfint(null);
                                    reader.next();
                                } else {
                                    object.setArrayOfint(ArrayOfint.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetLanguagesForTranslate
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetLanguagesForTranslate",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetLanguagesForTranslate.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetLanguagesForTranslate",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetLanguagesForTranslate",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetLanguagesForTranslate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetLanguagesForTranslate object =
                    new GetLanguagesForTranslate();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetLanguagesForTranslate".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetLanguagesForTranslate) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Duration
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "duration",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Duration
         */
        protected org.apache.axis2.databinding.types.Duration localDuration;
        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Duration
         */
        public org.apache.axis2.databinding.types.Duration getDuration()
        {
            return localDuration;
        }
        /**
         * Auto generated setter method
         * @param param Duration
         */
        public void setDuration(org.apache.axis2.databinding.types.Duration param)
        {
            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(param).matches("\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")) {
                this.localDuration = param;
            } else {
                throw new java.lang.RuntimeException();
            }
        }
        public java.lang.String toString()
        {
            return localDuration.toString();
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Duration.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String localName = parentQName.getLocalPart();
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":duration",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "duration",
                                   xmlWriter);
                }
            }
            if (localDuration == null) {
                throw new org.apache.axis2.databinding.ADBException("Value cannot be null !!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDuration));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDuration)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static Duration fromString(java.lang.String value,
                                              java.lang.String namespaceURI)
            {
                Duration returnValue = new Duration();
                returnValue.setDuration(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDuration(value));
                return returnValue;
            }
            public static Duration fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                              java.lang.String content)
            {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return Duration.Factory.fromString(content, namespaceUri);
                } else {
                    return Duration.Factory.fromString(content, "");
                }
            }
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Duration parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Duration object =
                    new Duration();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                java.lang.String content = reader.getElementText();
                                object.setDuration(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDuration(content));
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _short
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "short",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _short
         */
        protected short local_short;
        /**
         * Auto generated getter method
         * @return short
         */
        public short get_short()
        {
            return local_short;
        }
        /**
         * Auto generated setter method
         * @param param _short
         */
        public void set_short(short param)
        {
            this.local_short = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _short.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "short";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":short",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "short",
                                   xmlWriter);
                }
            }
            if (local_short == java.lang.Short.MIN_VALUE) {
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_short));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_short)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _short parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _short object =
                    new _short();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        object.set_short(java.lang.Short.MIN_VALUE);
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "short").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.set_short(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToShort(content));
                                } else {
                                    object.set_short(java.lang.Short.MIN_VALUE);
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class DetectResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "DetectResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for DetectResult
         */
        protected java.lang.String localDetectResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetectResultTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDetectResult()
        {
            return localDetectResult;
        }
        /**
         * Auto generated setter method
         * @param param DetectResult
         */
        public void setDetectResult(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localDetectResultTracker = true;
            } else {
                localDetectResultTracker = true;
            }
            this.localDetectResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    DetectResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":DetectResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "DetectResponse",
                                   xmlWriter);
                }
            }
            if (localDetectResultTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "DetectResult", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "DetectResult");
                    }
                } else {
                    xmlWriter.writeStartElement("DetectResult");
                }
                if (localDetectResult == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localDetectResult);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localDetectResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "DetectResult"));
                elementList.add(localDetectResult == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDetectResult));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DetectResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                DetectResponse object =
                    new DetectResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"DetectResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DetectResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "DetectResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setDetectResult(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class DetectArrayResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "DetectArrayResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for DetectArrayResult
         */
        protected ArrayOfstring localDetectArrayResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetectArrayResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getDetectArrayResult()
        {
            return localDetectArrayResult;
        }
        /**
         * Auto generated setter method
         * @param param DetectArrayResult
         */
        public void setDetectArrayResult(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localDetectArrayResultTracker = true;
            } else {
                localDetectArrayResultTracker = true;
            }
            this.localDetectArrayResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    DetectArrayResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":DetectArrayResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "DetectArrayResponse",
                                   xmlWriter);
                }
            }
            if (localDetectArrayResultTracker) {
                if (localDetectArrayResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "DetectArrayResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "DetectArrayResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("DetectArrayResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localDetectArrayResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "DetectArrayResult"),
                                                     factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localDetectArrayResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "DetectArrayResult"));
                elementList.add(localDetectArrayResult == null ? null
                                : localDetectArrayResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DetectArrayResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                DetectArrayResponse object =
                    new DetectArrayResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"DetectArrayResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (DetectArrayResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "DetectArrayResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setDetectArrayResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setDetectArrayResult(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetLanguagesForSpeak
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetLanguagesForSpeak",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetLanguagesForSpeak.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetLanguagesForSpeak",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetLanguagesForSpeak",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetLanguagesForSpeak parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetLanguagesForSpeak object =
                    new GetLanguagesForSpeak();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetLanguagesForSpeak".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetLanguagesForSpeak) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class _char
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "char",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for _char
         */
        protected int local_char;
        /**
         * Auto generated getter method
         * @return int
         */
        public int get_char()
        {
            return local_char;
        }
        /**
         * Auto generated setter method
         * @param param _char
         */
        public void set_char(int param)
        {
            this.local_char = param;
        }
        public java.lang.String toString()
        {
            return local_char + "";
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    _char.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String localName = parentQName.getLocalPart();
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":char",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "char",
                                   xmlWriter);
                }
            }
            if (local_char == java.lang.Integer.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException("property value cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_char));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                        new java.lang.Object[] {
                                                                                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_char)
                                                                                        },
                                                                                        null);
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static _char fromString(java.lang.String value,
                                           java.lang.String namespaceURI)
            {
                _char returnValue = new _char();
                returnValue.set_char(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(value));
                return returnValue;
            }
            public static _char fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                           java.lang.String content)
            {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0, content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                    return _char.Factory.fromString(content, namespaceUri);
                } else {
                    return _char.Factory.fromString(content, "");
                }
            }
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static _char parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                _char object =
                    new _char();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                java.lang.String content = reader.getElementText();
                                object.set_char(
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class BreakSentencesResponse
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "BreakSentencesResponse",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for BreakSentencesResult
         */
        protected ArrayOfint localBreakSentencesResult;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBreakSentencesResultTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfint
         */
        public ArrayOfint getBreakSentencesResult()
        {
            return localBreakSentencesResult;
        }
        /**
         * Auto generated setter method
         * @param param BreakSentencesResult
         */
        public void setBreakSentencesResult(ArrayOfint param)
        {
            if (param != null) {
                /* update the setting tracker */
                localBreakSentencesResultTracker = true;
            } else {
                localBreakSentencesResultTracker = true;
            }
            this.localBreakSentencesResult = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    BreakSentencesResponse.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":BreakSentencesResponse",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "BreakSentencesResponse",
                                   xmlWriter);
                }
            }
            if (localBreakSentencesResultTracker) {
                if (localBreakSentencesResult == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "BreakSentencesResult", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "BreakSentencesResult");
                        }
                    } else {
                        xmlWriter.writeStartElement("BreakSentencesResult");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localBreakSentencesResult.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "BreakSentencesResult"),
                                                        factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localBreakSentencesResultTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "BreakSentencesResult"));
                elementList.add(localBreakSentencesResult == null ? null
                                : localBreakSentencesResult);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BreakSentencesResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                BreakSentencesResponse object =
                    new BreakSentencesResponse();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"BreakSentencesResponse".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (BreakSentencesResponse) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "BreakSentencesResult").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setBreakSentencesResult(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setBreakSentencesResult(ArrayOfint.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfstring
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = ArrayOfstring
        Namespace URI = http://schemas.microsoft.com/2003/10/Serialization/Arrays
        Namespace Prefix = ns1
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/Arrays")) {
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for String
         * This was an Array!
         */
        protected java.lang.String[] localString;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStringTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getString()
        {
            return localString;
        }
        /**
         * validate the array for String
         */
        protected void validateString(java.lang.String[] param) {}
        /**
         * Auto generated setter method
         * @param param String
         */
        public void setString(java.lang.String[] param)
        {
            validateString(param);
            if (param != null) {
                /* update the setting tracker */
                localStringTracker = true;
            } else {
                localStringTracker = true;
            }
            this.localString = param;
        }
        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addString(java.lang.String param)
        {
            if (localString == null) {
                localString = new java.lang.String[] {};
            }
            /* update the setting tracker */
            localStringTracker = true;
            java.util.List list =
                org.apache.axis2.databinding.utils.ConverterUtil.toList(localString);
            list.add(param);
            this.localString =
                (java.lang.String[])list.toArray(
                    new java.lang.String[list.size()]);
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfstring.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/Arrays");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":ArrayOfstring",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "ArrayOfstring",
                                   xmlWriter);
                }
            }
            if (localStringTracker) {
                if (localString != null) {
                    namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
                    boolean emptyNamespace = namespace == null || namespace.length() == 0;
                    prefix = emptyNamespace ? null : xmlWriter.getPrefix(namespace);
                    for (int i = 0; i < localString.length; i++) {
                        if (localString[i] != null) {
                            if (!emptyNamespace) {
                                if (prefix == null) {
                                    java.lang.String prefix2 = generatePrefix(namespace);
                                    xmlWriter.writeStartElement(prefix2, "string", namespace);
                                    xmlWriter.writeNamespace(prefix2, namespace);
                                    xmlWriter.setPrefix(prefix2, namespace);
                                } else {
                                    xmlWriter.writeStartElement(namespace, "string");
                                }
                            } else {
                                xmlWriter.writeStartElement("string");
                            }
                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString[i]));
                            xmlWriter.writeEndElement();
                        } else {
                            /* write null attribute */
                            namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
                            if (!namespace.equals("")) {
                                prefix = xmlWriter.getPrefix(namespace);
                                if (prefix == null) {
                                    prefix = generatePrefix(namespace);
                                    xmlWriter.writeStartElement(prefix, "string", namespace);
                                    xmlWriter.writeNamespace(prefix, namespace);
                                    xmlWriter.setPrefix(prefix, namespace);
                                } else {
                                    xmlWriter.writeStartElement(namespace, "string");
                                }
                            } else {
                                xmlWriter.writeStartElement("string");
                            }
                            writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    /* write the null attribute
                       write null attribute */
                    java.lang.String namespace2 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "string", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "string");
                        }
                    } else {
                        xmlWriter.writeStartElement("string");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localStringTracker) {
                if (localString != null) {
                    for (int i = 0; i < localString.length; i++) {
                        if (localString[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays",
                                                                          "string"));
                            elementList.add(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localString[i]));
                        } else {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays",
                                                                          "string"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays",
                                                                  "string"));
                    elementList.add(null);
                }
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfstring parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfstring object =
                    new ArrayOfstring();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"ArrayOfstring".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfstring) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    java.util.ArrayList list1 = new java.util.ArrayList();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").equals(reader.getName())) {
                        /* Process the array and step past its final element's end. */
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(reader.getElementText());
                        }
                        /* loop until we find a start element that is not part of this array */
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            /* Ensure we are at the EndElement */
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            /* Step out of this element */
                            reader.next();
                            /* Step to next element event. */
                            while (!reader.isStartElement() && !reader.isEndElement()) {
                                reader.next();
                            }
                            if (reader.isEndElement()) {
                                /* two continuous end elements means we are exiting the xml structure */
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/Arrays", "string").equals(reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(reader.getElementText());
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        /* call the converter utility  to convert and set the array */
                        object.setString((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfGetTranslationsResponseE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "ArrayOfGetTranslationsResponse",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for ArrayOfGetTranslationsResponse
         */
        protected ArrayOfGetTranslationsResponse localArrayOfGetTranslationsResponse;
        /**
         * Auto generated getter method
         * @return ArrayOfGetTranslationsResponse
         */
        public ArrayOfGetTranslationsResponse getArrayOfGetTranslationsResponse()
        {
            return localArrayOfGetTranslationsResponse;
        }
        /**
         * Auto generated setter method
         * @param param ArrayOfGetTranslationsResponse
         */
        public void setArrayOfGetTranslationsResponse(ArrayOfGetTranslationsResponse param)
        {
            this.localArrayOfGetTranslationsResponse = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfGetTranslationsResponseE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfGetTranslationsResponse == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ArrayOfGetTranslationsResponse", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ArrayOfGetTranslationsResponse");
                    }
                } else {
                    xmlWriter.writeStartElement("ArrayOfGetTranslationsResponse");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localArrayOfGetTranslationsResponse.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localArrayOfGetTranslationsResponse == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localArrayOfGetTranslationsResponse.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfGetTranslationsResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfGetTranslationsResponseE object =
                    new ArrayOfGetTranslationsResponseE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "ArrayOfGetTranslationsResponse").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setArrayOfGetTranslationsResponse(null);
                                    reader.next();
                                } else {
                                    object.setArrayOfGetTranslationsResponse(ArrayOfGetTranslationsResponse.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class AddTranslation
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "AddTranslation",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for OriginalText
         */
        protected java.lang.String localOriginalText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOriginalTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOriginalText()
        {
            return localOriginalText;
        }
        /**
         * Auto generated setter method
         * @param param OriginalText
         */
        public void setOriginalText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localOriginalTextTracker = true;
            } else {
                localOriginalTextTracker = true;
            }
            this.localOriginalText = param;
        }
        /**
         * field for TranslatedText
         */
        protected java.lang.String localTranslatedText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslatedTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTranslatedText()
        {
            return localTranslatedText;
        }
        /**
         * Auto generated setter method
         * @param param TranslatedText
         */
        public void setTranslatedText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTranslatedTextTracker = true;
            } else {
                localTranslatedTextTracker = true;
            }
            this.localTranslatedText = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for To
         */
        protected java.lang.String localTo;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTo()
        {
            return localTo;
        }
        /**
         * Auto generated setter method
         * @param param To
         */
        public void setTo(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localToTracker = true;
            } else {
                localToTracker = true;
            }
            this.localTo = param;
        }
        /**
         * field for Rating
         */
        protected int localRating;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRatingTracker = false;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getRating()
        {
            return localRating;
        }
        /**
         * Auto generated setter method
         * @param param Rating
         */
        public void setRating(int param)
        {
            /* setting primitive attribute tracker to true */
            if (param == java.lang.Integer.MIN_VALUE) {
                localRatingTracker = false;
            } else {
                localRatingTracker = true;
            }
            this.localRating = param;
        }
        /**
         * field for ContentType
         */
        protected java.lang.String localContentType;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContentTypeTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContentType()
        {
            return localContentType;
        }
        /**
         * Auto generated setter method
         * @param param ContentType
         */
        public void setContentType(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localContentTypeTracker = true;
            } else {
                localContentTypeTracker = true;
            }
            this.localContentType = param;
        }
        /**
         * field for Category
         */
        protected java.lang.String localCategory;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCategoryTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCategory()
        {
            return localCategory;
        }
        /**
         * Auto generated setter method
         * @param param Category
         */
        public void setCategory(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localCategoryTracker = true;
            } else {
                localCategoryTracker = true;
            }
            this.localCategory = param;
        }
        /**
         * field for User
         */
        protected java.lang.String localUser;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUserTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUser()
        {
            return localUser;
        }
        /**
         * Auto generated setter method
         * @param param User
         */
        public void setUser(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localUserTracker = true;
            } else {
                localUserTracker = true;
            }
            this.localUser = param;
        }
        /**
         * field for Uri
         */
        protected java.lang.String localUri;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUriTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUri()
        {
            return localUri;
        }
        /**
         * Auto generated setter method
         * @param param Uri
         */
        public void setUri(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localUriTracker = true;
            } else {
                localUriTracker = true;
            }
            this.localUri = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    AddTranslation.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":AddTranslation",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "AddTranslation",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localOriginalTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "originalText", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "originalText");
                    }
                } else {
                    xmlWriter.writeStartElement("originalText");
                }
                if (localOriginalText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localOriginalText);
                }
                xmlWriter.writeEndElement();
            }
            if (localTranslatedTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "translatedText", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "translatedText");
                    }
                } else {
                    xmlWriter.writeStartElement("translatedText");
                }
                if (localTranslatedText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTranslatedText);
                }
                xmlWriter.writeEndElement();
            }
            if (localFromTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "from", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "from");
                    }
                } else {
                    xmlWriter.writeStartElement("from");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localToTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "to", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "to");
                    }
                } else {
                    xmlWriter.writeStartElement("to");
                }
                if (localTo == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTo);
                }
                xmlWriter.writeEndElement();
            }
            if (localRatingTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "rating", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "rating");
                    }
                } else {
                    xmlWriter.writeStartElement("rating");
                }
                if (localRating == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException("rating cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRating));
                }
                xmlWriter.writeEndElement();
            }
            if (localContentTypeTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "contentType", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "contentType");
                    }
                } else {
                    xmlWriter.writeStartElement("contentType");
                }
                if (localContentType == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localContentType);
                }
                xmlWriter.writeEndElement();
            }
            if (localCategoryTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "category", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "category");
                    }
                } else {
                    xmlWriter.writeStartElement("category");
                }
                if (localCategory == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCategory);
                }
                xmlWriter.writeEndElement();
            }
            if (localUserTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "user", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "user");
                    }
                } else {
                    xmlWriter.writeStartElement("user");
                }
                if (localUser == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localUser);
                }
                xmlWriter.writeEndElement();
            }
            if (localUriTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "uri", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "uri");
                    }
                } else {
                    xmlWriter.writeStartElement("uri");
                }
                if (localUri == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localUri);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localOriginalTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "originalText"));
                elementList.add(localOriginalText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localOriginalText));
            }
            if (localTranslatedTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "translatedText"));
                elementList.add(localTranslatedText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTranslatedText));
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "from"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localToTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "to"));
                elementList.add(localTo == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTo));
            }
            if (localRatingTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "rating"));
                elementList.add(
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRating));
            }
            if (localContentTypeTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "contentType"));
                elementList.add(localContentType == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContentType));
            }
            if (localCategoryTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "category"));
                elementList.add(localCategory == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCategory));
            }
            if (localUserTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "user"));
                elementList.add(localUser == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUser));
            }
            if (localUriTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "uri"));
                elementList.add(localUri == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUri));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AddTranslation parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                AddTranslation object =
                    new AddTranslation();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"AddTranslation".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AddTranslation) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "originalText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setOriginalText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "translatedText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTranslatedText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "from").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "to").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTo(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "rating").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setRating(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        object.setRating(java.lang.Integer.MIN_VALUE);
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "contentType").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setContentType(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "category").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setCategory(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "user").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setUser(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "uri").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setUri(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateOptions
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = TranslateOptions
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Category
         */
        protected java.lang.String localCategory;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCategoryTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCategory()
        {
            return localCategory;
        }
        /**
         * Auto generated setter method
         * @param param Category
         */
        public void setCategory(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localCategoryTracker = true;
            } else {
                localCategoryTracker = true;
            }
            this.localCategory = param;
        }
        /**
         * field for ContentType
         */
        protected java.lang.String localContentType;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContentTypeTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContentType()
        {
            return localContentType;
        }
        /**
         * Auto generated setter method
         * @param param ContentType
         */
        public void setContentType(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localContentTypeTracker = true;
            } else {
                localContentTypeTracker = true;
            }
            this.localContentType = param;
        }
        /**
         * field for ReservedFlags
         */
        protected java.lang.String localReservedFlags;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReservedFlagsTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getReservedFlags()
        {
            return localReservedFlags;
        }
        /**
         * Auto generated setter method
         * @param param ReservedFlags
         */
        public void setReservedFlags(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localReservedFlagsTracker = true;
            } else {
                localReservedFlagsTracker = true;
            }
            this.localReservedFlags = param;
        }
        /**
         * field for State
         */
        protected java.lang.String localState;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStateTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getState()
        {
            return localState;
        }
        /**
         * Auto generated setter method
         * @param param State
         */
        public void setState(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localStateTracker = true;
            } else {
                localStateTracker = true;
            }
            this.localState = param;
        }
        /**
         * field for Uri
         */
        protected java.lang.String localUri;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUriTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUri()
        {
            return localUri;
        }
        /**
         * Auto generated setter method
         * @param param Uri
         */
        public void setUri(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localUriTracker = true;
            } else {
                localUriTracker = true;
            }
            this.localUri = param;
        }
        /**
         * field for User
         */
        protected java.lang.String localUser;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUserTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUser()
        {
            return localUser;
        }
        /**
         * Auto generated setter method
         * @param param User
         */
        public void setUser(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localUserTracker = true;
            } else {
                localUserTracker = true;
            }
            this.localUser = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateOptions.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":TranslateOptions",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "TranslateOptions",
                                   xmlWriter);
                }
            }
            if (localCategoryTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Category", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Category");
                    }
                } else {
                    xmlWriter.writeStartElement("Category");
                }
                if (localCategory == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCategory);
                }
                xmlWriter.writeEndElement();
            }
            if (localContentTypeTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ContentType", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ContentType");
                    }
                } else {
                    xmlWriter.writeStartElement("ContentType");
                }
                if (localContentType == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localContentType);
                }
                xmlWriter.writeEndElement();
            }
            if (localReservedFlagsTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "ReservedFlags", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "ReservedFlags");
                    }
                } else {
                    xmlWriter.writeStartElement("ReservedFlags");
                }
                if (localReservedFlags == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localReservedFlags);
                }
                xmlWriter.writeEndElement();
            }
            if (localStateTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "State", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "State");
                    }
                } else {
                    xmlWriter.writeStartElement("State");
                }
                if (localState == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localState);
                }
                xmlWriter.writeEndElement();
            }
            if (localUriTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Uri", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Uri");
                    }
                } else {
                    xmlWriter.writeStartElement("Uri");
                }
                if (localUri == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localUri);
                }
                xmlWriter.writeEndElement();
            }
            if (localUserTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "User", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "User");
                    }
                } else {
                    xmlWriter.writeStartElement("User");
                }
                if (localUser == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localUser);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localCategoryTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Category"));
                elementList.add(localCategory == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCategory));
            }
            if (localContentTypeTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "ContentType"));
                elementList.add(localContentType == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContentType));
            }
            if (localReservedFlagsTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "ReservedFlags"));
                elementList.add(localReservedFlags == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localReservedFlags));
            }
            if (localStateTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "State"));
                elementList.add(localState == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localState));
            }
            if (localUriTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Uri"));
                elementList.add(localUri == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUri));
            }
            if (localUserTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "User"));
                elementList.add(localUser == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUser));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateOptions parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateOptions object =
                    new TranslateOptions();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"TranslateOptions".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TranslateOptions) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Category").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setCategory(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "ContentType").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setContentType(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "ReservedFlags").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setReservedFlags(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "State").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setState(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Uri").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setUri(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "User").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setUser(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class Translate
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "Translate",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Text
         */
        protected java.lang.String localText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText()
        {
            return localText;
        }
        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localTextTracker = true;
            } else {
                localTextTracker = true;
            }
            this.localText = param;
        }
        /**
         * field for From
         */
        protected java.lang.String localFrom;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFromTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFrom()
        {
            return localFrom;
        }
        /**
         * Auto generated setter method
         * @param param From
         */
        public void setFrom(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localFromTracker = true;
            } else {
                localFromTracker = true;
            }
            this.localFrom = param;
        }
        /**
         * field for To
         */
        protected java.lang.String localTo;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localToTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTo()
        {
            return localTo;
        }
        /**
         * Auto generated setter method
         * @param param To
         */
        public void setTo(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localToTracker = true;
            } else {
                localToTracker = true;
            }
            this.localTo = param;
        }
        /**
         * field for ContentType
         */
        protected java.lang.String localContentType;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContentTypeTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContentType()
        {
            return localContentType;
        }
        /**
         * Auto generated setter method
         * @param param ContentType
         */
        public void setContentType(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localContentTypeTracker = true;
            } else {
                localContentTypeTracker = true;
            }
            this.localContentType = param;
        }
        /**
         * field for Category
         */
        protected java.lang.String localCategory;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCategoryTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCategory()
        {
            return localCategory;
        }
        /**
         * Auto generated setter method
         * @param param Category
         */
        public void setCategory(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localCategoryTracker = true;
            } else {
                localCategoryTracker = true;
            }
            this.localCategory = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    Translate.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":Translate",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "Translate",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localTextTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "text", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "text");
                    }
                } else {
                    xmlWriter.writeStartElement("text");
                }
                if (localText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localText);
                }
                xmlWriter.writeEndElement();
            }
            if (localFromTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "from", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "from");
                    }
                } else {
                    xmlWriter.writeStartElement("from");
                }
                if (localFrom == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFrom);
                }
                xmlWriter.writeEndElement();
            }
            if (localToTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "to", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "to");
                    }
                } else {
                    xmlWriter.writeStartElement("to");
                }
                if (localTo == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTo);
                }
                xmlWriter.writeEndElement();
            }
            if (localContentTypeTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "contentType", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "contentType");
                    }
                } else {
                    xmlWriter.writeStartElement("contentType");
                }
                if (localContentType == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localContentType);
                }
                xmlWriter.writeEndElement();
            }
            if (localCategoryTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "category", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "category");
                    }
                } else {
                    xmlWriter.writeStartElement("category");
                }
                if (localCategory == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCategory);
                }
                xmlWriter.writeEndElement();
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "text"));
                elementList.add(localText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localText));
            }
            if (localFromTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "from"));
                elementList.add(localFrom == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localFrom));
            }
            if (localToTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "to"));
                elementList.add(localTo == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTo));
            }
            if (localContentTypeTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "contentType"));
                elementList.add(localContentType == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localContentType));
            }
            if (localCategoryTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "category"));
                elementList.add(localCategory == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCategory));
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Translate parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                Translate object =
                    new Translate();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"Translate".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (Translate) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "text").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "from").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setFrom(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "to").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTo(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "contentType").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setContentType(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "category").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setCategory(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class UnsignedShort
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.microsoft.com/2003/10/Serialization/",
            "unsignedShort",
            "ns4");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.microsoft.com/2003/10/Serialization/")) {
                return "ns4";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for UnsignedShort
         */
        protected org.apache.axis2.databinding.types.UnsignedShort localUnsignedShort;
        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.UnsignedShort
         */
        public org.apache.axis2.databinding.types.UnsignedShort getUnsignedShort()
        {
            return localUnsignedShort;
        }
        /**
         * Auto generated setter method
         * @param param UnsignedShort
         */
        public void setUnsignedShort(org.apache.axis2.databinding.types.UnsignedShort param)
        {
            this.localUnsignedShort = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    UnsignedShort.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            java.lang.String namespace = "http://schemas.microsoft.com/2003/10/Serialization/";
            java.lang.String localName = "unsignedShort";
            if (!namespace.equals("")) {
                java.lang.String prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, localName, namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, localName);
                }
            } else {
                xmlWriter.writeStartElement(localName);
            }
            /* add the type details if this is used in a simple type */
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.microsoft.com/2003/10/Serialization/");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":unsignedShort",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "unsignedShort",
                                   xmlWriter);
                }
            }
            if (localUnsignedShort == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedShort));
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localUnsignedShort == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                                                                                            new java.lang.Object[] {
                                                                                                org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                                                                                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUnsignedShort)
                                                                                            },
                                                                                            null);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UnsignedShort parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                UnsignedShort object =
                    new UnsignedShort();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.microsoft.com/2003/10/Serialization/", "unsignedShort").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                                    java.lang.String content = reader.getElementText();
                                    object.setUnsignedShort(
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToUnsignedShort(content));
                                } else {
                                    reader.getElementText(); /* throw away text nodes if any. */
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class GetLanguageNames
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://api.microsofttranslator.com/V2",
            "GetLanguageNames",
            "ns3");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://api.microsofttranslator.com/V2")) {
                return "ns3";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for AppId
         */
        protected java.lang.String localAppId;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAppIdTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAppId()
        {
            return localAppId;
        }
        /**
         * Auto generated setter method
         * @param param AppId
         */
        public void setAppId(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localAppIdTracker = true;
            } else {
                localAppIdTracker = true;
            }
            this.localAppId = param;
        }
        /**
         * field for Locale
         */
        protected java.lang.String localLocale;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLocaleTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLocale()
        {
            return localLocale;
        }
        /**
         * Auto generated setter method
         * @param param Locale
         */
        public void setLocale(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localLocaleTracker = true;
            } else {
                localLocaleTracker = true;
            }
            this.localLocale = param;
        }
        /**
         * field for LanguageCodes
         */
        protected ArrayOfstring localLanguageCodes;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLanguageCodesTracker = false;
        /**
         * Auto generated getter method
         * @return ArrayOfstring
         */
        public ArrayOfstring getLanguageCodes()
        {
            return localLanguageCodes;
        }
        /**
         * Auto generated setter method
         * @param param LanguageCodes
         */
        public void setLanguageCodes(ArrayOfstring param)
        {
            if (param != null) {
                /* update the setting tracker */
                localLanguageCodesTracker = true;
            } else {
                localLanguageCodesTracker = true;
            }
            this.localLanguageCodes = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    GetLanguageNames.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://api.microsofttranslator.com/V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":GetLanguageNames",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "GetLanguageNames",
                                   xmlWriter);
                }
            }
            if (localAppIdTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "appId", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "appId");
                    }
                } else {
                    xmlWriter.writeStartElement("appId");
                }
                if (localAppId == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAppId);
                }
                xmlWriter.writeEndElement();
            }
            if (localLocaleTracker) {
                namespace = "http://api.microsofttranslator.com/V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "locale", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "locale");
                    }
                } else {
                    xmlWriter.writeStartElement("locale");
                }
                if (localLocale == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localLocale);
                }
                xmlWriter.writeEndElement();
            }
            if (localLanguageCodesTracker) {
                if (localLanguageCodes == null) {
                    java.lang.String namespace2 = "http://api.microsofttranslator.com/V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "languageCodes", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "languageCodes");
                        }
                    } else {
                        xmlWriter.writeStartElement("languageCodes");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localLanguageCodes.serialize(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "languageCodes"),
                                                 factory, xmlWriter);
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localAppIdTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "appId"));
                elementList.add(localAppId == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAppId));
            }
            if (localLocaleTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "locale"));
                elementList.add(localLocale == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocale));
            }
            if (localLanguageCodesTracker) {
                elementList.add(new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2",
                                                              "languageCodes"));
                elementList.add(localLanguageCodes == null ? null
                                : localLanguageCodes);
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetLanguageNames parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                GetLanguageNames object =
                    new GetLanguageNames();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"GetLanguageNames".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetLanguageNames) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "appId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setAppId(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "locale").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setLocale(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://api.microsofttranslator.com/V2", "languageCodes").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            object.setLanguageCodes(null);
                            reader.next();
                            reader.next();
                        } else {
                            object.setLanguageCodes(ArrayOfstring.Factory.parse(reader));
                            reader.next();
                        }
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslationMatch
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = TranslationMatch
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for Count
         */
        protected int localCount;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getCount()
        {
            return localCount;
        }
        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(int param)
        {
            this.localCount = param;
        }
        /**
         * field for Error
         */
        protected java.lang.String localError;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrorTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getError()
        {
            return localError;
        }
        /**
         * Auto generated setter method
         * @param param Error
         */
        public void setError(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localErrorTracker = true;
            } else {
                localErrorTracker = true;
            }
            this.localError = param;
        }
        /**
         * field for MatchDegree
         */
        protected int localMatchDegree;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getMatchDegree()
        {
            return localMatchDegree;
        }
        /**
         * Auto generated setter method
         * @param param MatchDegree
         */
        public void setMatchDegree(int param)
        {
            this.localMatchDegree = param;
        }
        /**
         * field for MatchedOriginalText
         */
        protected java.lang.String localMatchedOriginalText;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMatchedOriginalTextTracker = false;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMatchedOriginalText()
        {
            return localMatchedOriginalText;
        }
        /**
         * Auto generated setter method
         * @param param MatchedOriginalText
         */
        public void setMatchedOriginalText(java.lang.String param)
        {
            if (param != null) {
                /* update the setting tracker */
                localMatchedOriginalTextTracker = true;
            } else {
                localMatchedOriginalTextTracker = true;
            }
            this.localMatchedOriginalText = param;
        }
        /**
         * field for Rating
         */
        protected int localRating;
        /**
         * Auto generated getter method
         * @return int
         */
        public int getRating()
        {
            return localRating;
        }
        /**
         * Auto generated setter method
         * @param param Rating
         */
        public void setRating(int param)
        {
            this.localRating = param;
        }
        /**
         * field for TranslatedText
         */
        protected java.lang.String localTranslatedText;
        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTranslatedText()
        {
            return localTranslatedText;
        }
        /**
         * Auto generated setter method
         * @param param TranslatedText
         */
        public void setTranslatedText(java.lang.String param)
        {
            this.localTranslatedText = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslationMatch.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":TranslationMatch",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "TranslationMatch",
                                   xmlWriter);
                }
            }
            namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
            if (!namespace.equals("")) {
                prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, "Count", namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, "Count");
                }
            } else {
                xmlWriter.writeStartElement("Count");
            }
            if (localCount == java.lang.Integer.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException("Count cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
            }
            xmlWriter.writeEndElement();
            if (localErrorTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "Error", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "Error");
                    }
                } else {
                    xmlWriter.writeStartElement("Error");
                }
                if (localError == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localError);
                }
                xmlWriter.writeEndElement();
            }
            namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
            if (!namespace.equals("")) {
                prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, "MatchDegree", namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, "MatchDegree");
                }
            } else {
                xmlWriter.writeStartElement("MatchDegree");
            }
            if (localMatchDegree == java.lang.Integer.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException("MatchDegree cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMatchDegree));
            }
            xmlWriter.writeEndElement();
            if (localMatchedOriginalTextTracker) {
                namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "MatchedOriginalText", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "MatchedOriginalText");
                    }
                } else {
                    xmlWriter.writeStartElement("MatchedOriginalText");
                }
                if (localMatchedOriginalText == null) {
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localMatchedOriginalText);
                }
                xmlWriter.writeEndElement();
            }
            namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
            if (!namespace.equals("")) {
                prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, "Rating", namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, "Rating");
                }
            } else {
                xmlWriter.writeStartElement("Rating");
            }
            if (localRating == java.lang.Integer.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException("Rating cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRating));
            }
            xmlWriter.writeEndElement();
            namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
            if (!namespace.equals("")) {
                prefix = xmlWriter.getPrefix(namespace);
                if (prefix == null) {
                    prefix = generatePrefix(namespace);
                    xmlWriter.writeStartElement(prefix, "TranslatedText", namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                } else {
                    xmlWriter.writeStartElement(namespace, "TranslatedText");
                }
            } else {
                xmlWriter.writeStartElement("TranslatedText");
            }
            if (localTranslatedText == null) {
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
            } else {
                xmlWriter.writeCharacters(localTranslatedText);
            }
            xmlWriter.writeEndElement();
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                          "Count"));
            elementList.add(
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCount));
            if (localErrorTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "Error"));
                elementList.add(localError == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localError));
            }
            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                          "MatchDegree"));
            elementList.add(
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMatchDegree));
            if (localMatchedOriginalTextTracker) {
                elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                              "MatchedOriginalText"));
                elementList.add(localMatchedOriginalText == null ? null
                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMatchedOriginalText));
            }
            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                          "Rating"));
            elementList.add(
                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRating));
            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                          "TranslatedText"));
            elementList.add(localTranslatedText == null ? null
                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTranslatedText));
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslationMatch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslationMatch object =
                    new TranslationMatch();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"TranslationMatch".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (TranslationMatch) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Count").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setCount(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        /* A start element we are not expecting indicates an invalid parameter was passed */
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Error").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setError(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "MatchDegree").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setMatchDegree(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        /* A start element we are not expecting indicates an invalid parameter was passed */
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "MatchedOriginalText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setMatchedOriginalText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "Rating").equals(reader.getName())) {
                        java.lang.String content = reader.getElementText();
                        object.setRating(
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        /* A start element we are not expecting indicates an invalid parameter was passed */
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslatedText").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();
                            object.setTranslatedText(
                                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                        } else {
                            reader.getElementText(); /* throw away text nodes if any. */
                        }
                        reader.next();
                    } /* End of if for expected property start element */
                    else {
                        /* A start element we are not expecting indicates an invalid parameter was passed */
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class TranslateArrayResponseE
    implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
            "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
            "TranslateArrayResponse",
            "ns2");
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslateArrayResponse
         */
        protected TranslateArrayResponse localTranslateArrayResponse;
        /**
         * Auto generated getter method
         * @return TranslateArrayResponse
         */
        public TranslateArrayResponse getTranslateArrayResponse()
        {
            return localTranslateArrayResponse;
        }
        /**
         * Auto generated setter method
         * @param param TranslateArrayResponse
         */
        public void setTranslateArrayResponse(TranslateArrayResponse param)
        {
            this.localTranslateArrayResponse = param;
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, MY_QNAME) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    TranslateArrayResponseE.this.serialize(MY_QNAME, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       MY_QNAME, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslateArrayResponse == null) {
                java.lang.String namespace = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                if (!namespace.equals("")) {
                    java.lang.String prefix = xmlWriter.getPrefix(namespace);
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                        xmlWriter.writeStartElement(prefix, "TranslateArrayResponse", namespace);
                        xmlWriter.writeNamespace(prefix, namespace);
                        xmlWriter.setPrefix(prefix, namespace);
                    } else {
                        xmlWriter.writeStartElement(namespace, "TranslateArrayResponse");
                    }
                } else {
                    xmlWriter.writeStartElement("TranslateArrayResponse");
                }
                /* write the nil attribute */
                writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                xmlWriter.writeEndElement();
            } else {
                localTranslateArrayResponse.serialize(MY_QNAME, factory, xmlWriter);
            }
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            /* We can safely assume an element has only one type associated with it */
            if (localTranslateArrayResponse == null) {
                return new org.apache.axis2.databinding.utils.reader.NullXMLStreamReader(MY_QNAME);
            } else {
                return localTranslateArrayResponse.getPullParser(MY_QNAME);
            }
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TranslateArrayResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                TranslateArrayResponseE object =
                    new TranslateArrayResponseE();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                        /* Skip the element and report the null value.  It cannot have subelements. */
                        while (!reader.isEndElement()) {
                            reader.next();
                        }
                        return object;
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslateArrayResponse").equals(reader.getName())) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                    object.setTranslateArrayResponse(null);
                                    reader.next();
                                } else {
                                    object.setTranslateArrayResponse(TranslateArrayResponse.Factory.parse(reader));
                                }
                            } /* End of if for expected property start element */
                            else {
                                /* A start element we are not expecting indicates an invalid parameter was passed */
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                            }
                        } else {
                            reader.next();
                        }
                    }  /* end of while loop */
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    public static class ArrayOfTranslationMatch
    implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
        name = ArrayOfTranslationMatch
        Namespace URI = http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2
        Namespace Prefix = ns2
         */
        private static java.lang.String generatePrefix(java.lang.String namespace)
        {
            if (namespace.equals("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")) {
                return "ns2";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        /**
         * field for TranslationMatch
         * This was an Array!
         */
        protected TranslationMatch[] localTranslationMatch;
        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTranslationMatchTracker = false;
        /**
         * Auto generated getter method
         * @return TranslationMatch[]
         */
        public TranslationMatch[] getTranslationMatch()
        {
            return localTranslationMatch;
        }
        /**
         * validate the array for TranslationMatch
         */
        protected void validateTranslationMatch(TranslationMatch[] param) {}
        /**
         * Auto generated setter method
         * @param param TranslationMatch
         */
        public void setTranslationMatch(TranslationMatch[] param)
        {
            validateTranslationMatch(param);
            if (param != null) {
                /* update the setting tracker */
                localTranslationMatchTracker = true;
            } else {
                localTranslationMatchTracker = true;
            }
            this.localTranslationMatch = param;
        }
        /**
         * Auto generated add method for the array for convenience
         * @param param TranslationMatch
         */
        public void addTranslationMatch(TranslationMatch param)
        {
            if (localTranslationMatch == null) {
                localTranslationMatch = new TranslationMatch[] {};
            }
            /* update the setting tracker */
            localTranslationMatchTracker = true;
            java.util.List list =
                org.apache.axis2.databinding.utils.ConverterUtil.toList(localTranslationMatch);
            list.add(param);
            this.localTranslationMatch =
                (TranslationMatch[])list.toArray(
                    new TranslationMatch[list.size()]);
        }
        /**
         * isReaderMTOMAware
         * @return true if the reader supports MTOM
         */
        public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)
        {
            boolean isReaderMTOMAware = false;
            try {
                isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
            } catch (java.lang.IllegalArgumentException e) {
                isReaderMTOMAware = false;
            }
            return isReaderMTOMAware;
        }
        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(final javax.xml.namespace.QName parentQName,
                                                          final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException
        {
            org.apache.axiom.om.OMDataSource dataSource =
                new org.apache.axis2.databinding.ADBDataSource(this, parentQName) {
                public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
                {
                    ArrayOfTranslationMatch.this.serialize(parentQName, factory, xmlWriter);
                }
            };
            return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
                       parentQName, factory, dataSource);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            serialize(parentQName, factory, xmlWriter, false);
        }
        public void serialize(final javax.xml.namespace.QName parentQName,
                              final org.apache.axiom.om.OMFactory factory,
                              org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter,
                              boolean serializeType)
        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException
        {
            java.lang.String prefix = null;
            java.lang.String namespace = null;
            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            if ((namespace != null) && (namespace.trim().length() > 0)) {
                java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
                if (writerPrefix != null) {
                    xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
                } else {
                    if (prefix == null) {
                        prefix = generatePrefix(namespace);
                    }
                    xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
                    xmlWriter.writeNamespace(prefix, namespace);
                    xmlWriter.setPrefix(prefix, namespace);
                }
            } else {
                xmlWriter.writeStartElement(parentQName.getLocalPart());
            }
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter, "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2");
                if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   namespacePrefix + ":ArrayOfTranslationMatch",
                                   xmlWriter);
                } else {
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "type",
                                   "ArrayOfTranslationMatch",
                                   xmlWriter);
                }
            }
            if (localTranslationMatchTracker) {
                if (localTranslationMatch != null) {
                    for (int i = 0; i < localTranslationMatch.length; i++) {
                        if (localTranslationMatch[i] != null) {
                            localTranslationMatch[i].serialize(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslationMatch"),
                                                               factory, xmlWriter);
                        } else {
                            /* write null attribute */
                            java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                            if (!namespace2.equals("")) {
                                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                                if (prefix2 == null) {
                                    prefix2 = generatePrefix(namespace2);
                                    xmlWriter.writeStartElement(prefix2, "TranslationMatch", namespace2);
                                    xmlWriter.writeNamespace(prefix2, namespace2);
                                    xmlWriter.setPrefix(prefix2, namespace2);
                                } else {
                                    xmlWriter.writeStartElement(namespace2, "TranslationMatch");
                                }
                            } else {
                                xmlWriter.writeStartElement("TranslationMatch");
                            }
                            /* write the nil attribute */
                            writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    /* write null attribute */
                    java.lang.String namespace2 = "http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2";
                    if (!namespace2.equals("")) {
                        java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);
                        if (prefix2 == null) {
                            prefix2 = generatePrefix(namespace2);
                            xmlWriter.writeStartElement(prefix2, "TranslationMatch", namespace2);
                            xmlWriter.writeNamespace(prefix2, namespace2);
                            xmlWriter.setPrefix(prefix2, namespace2);
                        } else {
                            xmlWriter.writeStartElement(namespace2, "TranslationMatch");
                        }
                    } else {
                        xmlWriter.writeStartElement("TranslationMatch");
                    }
                    /* write the nil attribute */
                    writeAttribute("xsi", "http://www.w3.org/2001/XMLSchema-instance", "nil", "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }
            xmlWriter.writeEndElement();
        }
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix, java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace, attName, attValue);
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace, java.lang.String attName,
                                    java.lang.String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }
        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                         javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }
            java.lang.String attributeValue;
            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }
        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }
                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    /* i.e this is the default namespace */
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }
        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException
        {
            if (qnames != null) {
                /* we have to store this data until last moment since it is not possible to write any
                   namespace data after writing the charactor data */
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;
                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }
                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }
        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException
        {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }
        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
        throws org.apache.axis2.databinding.ADBException
        {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();
            if (localTranslationMatchTracker) {
                if (localTranslationMatch != null) {
                    for (int i = 0; i < localTranslationMatch.length; i++) {
                        if (localTranslationMatch[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "TranslationMatch"));
                            elementList.add(localTranslationMatch[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                          "TranslationMatch"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2",
                                                                  "TranslationMatch"));
                    elementList.add(localTranslationMatch);
                }
            }
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
        }
        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayOfTranslationMatch parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception
            {
                ArrayOfTranslationMatch object =
                    new ArrayOfTranslationMatch();
                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";
                try {
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                                                                 "type");
                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;
                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0, fullTypeName.indexOf(":"));
                            }
                            nsPrefix = nsPrefix == null ? "" : nsPrefix;
                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":") + 1);
                            if (!"ArrayOfTranslationMatch".equals(type)) {
                                /* find namespace for the prefix */
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (ArrayOfTranslationMatch) ExtensionMapper.getTypeObject(
                                           nsUri, type, reader);
                            }
                        }
                    }
                    /* Note all attributes that were handled. Used to differ normal attributes
                       from anyAttributes. */
                    java.util.Vector handledAttributes = new java.util.Vector();
                    reader.next();
                    java.util.ArrayList list1 = new java.util.ArrayList();
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement() && new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslationMatch").equals(reader.getName())) {
                        /* Process the array and step past its final element's end. */
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                        if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(TranslationMatch.Factory.parse(reader));
                        }
                        /* loop until we find a start element that is not part of this array */
                        boolean loopDone1 = false;
                        while (!loopDone1) {
                            /* We should be at the end element, but make sure */
                            while (!reader.isEndElement()) {
                                reader.next();
                            }
                            /* Step out of this element */
                            reader.next();
                            /* Step to next element event. */
                            while (!reader.isStartElement() && !reader.isEndElement()) {
                                reader.next();
                            }
                            if (reader.isEndElement()) {
                                /* two continuous end elements means we are exiting the xml structure */
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName("http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2", "TranslationMatch").equals(reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance", "nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(TranslationMatch.Factory.parse(reader));
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }
                        /* call the converter utility  to convert and set the array */
                        object.setTranslationMatch((TranslationMatch[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                       TranslationMatch.class,
                                                       list1));
                    } /* End of if for expected property start element */
                    else {}
                    while (!reader.isStartElement() && !reader.isEndElement()) {
                        reader.next();
                    }
                    if (reader.isStartElement()) /* A start element we are not expecting indicates a trailing invalid property */
                    {
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }
                return object;
            }
        } /* end of factory class */
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.TranslateArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.TranslateArray.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.TranslateArrayResponse1 param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.TranslateArrayResponse1.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.AddTranslation param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.AddTranslation.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.AddTranslationResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.AddTranslationResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetLanguageNames param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguageNames.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetTranslations param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetTranslations.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetTranslationsResponse0 param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetTranslationsResponse0.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.AddTranslationArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.AddTranslationArray.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.Detect param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.Detect.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.DetectResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.DetectResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetTranslationsArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetTranslationsArray.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.Speak param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.Speak.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.SpeakResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.SpeakResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.Translate param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.Translate.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.TranslateResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.TranslateResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.DetectArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.DetectArray.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.DetectArrayResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.DetectArrayResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.BreakSentences param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.BreakSentences.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.BreakSentencesResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.BreakSentencesResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetAppIdToken param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetAppIdToken.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.om.OMElement toOM(com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            return param.getOMElement(com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse.MY_QNAME,
                                      org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.BreakSentences param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.BreakSentences.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.TranslateArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.TranslateArray.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.AddTranslationArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.AddTranslationArray.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.GetAppIdToken param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.GetAppIdToken.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.GetLanguageNames param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.GetLanguageNames.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.AddTranslation param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.AddTranslation.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.Translate param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.Translate.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.GetTranslationsArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.GetTranslationsArray.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.DetectArray param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.DetectArray.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.Speak param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.Speak.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.GetTranslations param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.GetTranslations.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, com.diwan.soap.SoapServiceStub.Detect param, boolean optimizeContent)
    throws org.apache.axis2.AxisFault
    {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody().addChild(param.getOMElement(com.diwan.soap.SoapServiceStub.Detect.MY_QNAME, factory));
            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }
    /* methods to provide back word compatibility */
    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory)
    {
        return factory.getDefaultEnvelope();
    }
    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
                                    java.lang.Class type,
                                    java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault
    {
        try {
            if (com.diwan.soap.SoapServiceStub.TranslateArray.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.TranslateArray.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.TranslateArrayResponse1.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.TranslateArrayResponse1.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.AddTranslation.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.AddTranslation.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.AddTranslationResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.AddTranslationResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetLanguageNames.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetLanguageNames.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetLanguageNamesResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetTranslations.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetTranslations.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetTranslationsResponse0.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetTranslationsResponse0.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.AddTranslationArray.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.AddTranslationArray.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.AddTranslationArrayResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetLanguagesForSpeak.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetLanguagesForSpeakResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.Detect.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.Detect.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.DetectResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.DetectResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetTranslationsArray.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetTranslationsArray.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetTranslationsArrayResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetLanguagesForTranslate.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetLanguagesForTranslateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.Speak.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.Speak.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.SpeakResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.SpeakResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.Translate.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.Translate.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.TranslateResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.TranslateResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.DetectArray.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.DetectArray.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.DetectArrayResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.DetectArrayResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.BreakSentences.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.BreakSentences.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.BreakSentencesResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.BreakSentencesResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetAppIdToken.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetAppIdToken.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
            if (com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse.class .equals(type)) {
                return com.diwan.soap.SoapServiceStub.GetAppIdTokenResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
        return null;
    }
}
